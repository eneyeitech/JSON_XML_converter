type: edu
custom_name: stage6
files:
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ConverterTest.java
  visible: false
  text: |
    import com.google.gson.*;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import org.w3c.dom.*;

    import javax.xml.parsers.*;
    import java.io.*;

    import java.math.BigDecimal;
    import java.util.*;

    class Clue {
        String answer;
        String input;

        Clue(String answer, String input) {
            this.answer = answer.strip();
            this.input = input.strip();
        }
    }

    public class ConverterTest extends StageTest<Clue> {

        static Map<String, String> allTests;

        static {
            allTests = new LinkedHashMap<>();

            allTests.put(
                "{\n" +
                    "    \"transactions\": {\n" +
                    "        \"id\": \"6753322\",\n" +
                    "        \"data\": [\n" +
                    "            124,\n" +
                    "            true,\n" +
                    "            false,\n" +
                    "            [ ],\n" +
                    "            [],\n" +
                    "            { },\n" +
                    "            {},\n" +
                    "            [\n" +
                    "                1, 2, 3,\n" +
                    "                {\n" +
                    "                    \"@attr\": \"value6\",\n" +
                    "                    \"#element\": \"value7\"\n" +
                    "                }\n" +
                    "            ],\n" +
                    "            null,\n" +
                    "            \"\",\n" +
                    "            {\n" +
                    "                \"key1\": \"value1\",\n" +
                    "                \"key2\": {\n" +
                    "                    \"@attr\": \"value2\",\n" +
                    "                    \"#key2\": \"value3\"\n" +
                    "                }\n" +
                    "            },\n" +
                    "            {\n" +
                    "                \"@attr2\": \"value4\",\n" +
                    "                \"#element\": \"value5\"\n" +
                    "            }\n" +
                    "        ]\n" +
                    "    }\n" +
                    "}",


                "<transactions>\n" +
                    "    <id>6753322</id>\n" +
                    "    <data>\n" +
                    "        <element>124</element>\n" +
                    "        <element>true</element>\n" +
                    "        <element>false</element>\n" +
                    "        <element></element>\n" +
                    "        <element></element>\n" +
                    "        <element></element>\n" +
                    "        <element></element>\n" +
                    "        <element>\n" +
                    "            <element>1</element>\n" +
                    "            <element>2</element>\n" +
                    "            <element>3</element>\n" +
                    "            <element attr=\"value6\">value7</element>\n" +
                    "        </element>\n" +
                    "        <element />\n" +
                    "        <element></element>\n" +
                    "        <element>\n" +
                    "            <key1>value1</key1>\n" +
                    "            <key2 attr=\"value2\">value3</key2>\n" +
                    "        </element>\n" +
                    "        <element attr2=\"value4\">value5</element>\n" +
                    "    </data>\n" +
                    "</transactions>"
            );



            allTests.put(
                "<?xml version = \"1.0\" encoding = \"utf-8\"?>\n" +
                    "<transactions>\n" +
                    "    <transaction>\n" +
                    "        <id>6753323</id>\n" +
                    "        <number region = \"Russia\">8-900-000-00-00</number>\n" +
                    "        <date day = \"12\" month = \"12\" year = \"2018\"/>\n" +
                    "        <amount currency=\"EUR\">1000.00</amount>\n" +
                    "        <completed>true</completed>\n" +
                    "    </transaction>\n" +
                    "    <transaction>\n" +
                    "        <id>67533244</id>\n" +
                    "        <number region = \"Russia\">8-900-000-00-01</number>\n" +
                    "        <date day = \"13\" month = \"12\" year = \"2018\"/>\n" +
                    "        <amount currency =\"RUB\">2000.00</amount>\n" +
                    "        <completed>true</completed>\n" +
                    "    </transaction>\n" +
                    "    <transaction>\n" +
                    "        <id>67533257</id>\n" +
                    "        <number region=\"Russia\">8-900-000-00-02</number>\n" +
                    "        <date day = \"14\" month = \"12\" year = \"2018\"/>\n" +
                    "        <amount currency = \"EUR\">3000.00</amount>\n" +
                    "        <completed>false</completed>\n" +
                    "    </transaction>\n" +
                    "    <transaction>\n" +
                    "        <id>67533259</id>\n" +
                    "        <number region = \"Ukraine\">8-900-000-00-03</number>\n" +
                    "        <date day = \"15\" month = \"12\" year = \"2018\"/>\n" +
                    "        <amount currency = \"GRN\">4000.00</amount>\n" +
                    "        <completed>false</completed>\n" +
                    "    </transaction>\n" +
                    "    <transaction>\n" +
                    "        <id>67533566</id>\n" +
                    "        <number region = \"Ukraine\">8-900-000-00-04</number>\n" +
                    "        <date day = \"16\" month = \"12\" year = \"2018\"/>\n" +
                    "        <amount currency = \"USD\">5000.00</amount>\n" +
                    "        <completed>false</completed>\n" +
                    "    </transaction>\n" +
                    "</transactions>",


                "{\n" +
                    "    \"transactions\" : [\n" +
                    "        {\n" +
                    "            \"id\" : \"6753323\",\n" +
                    "            \"number\" : {\n" +
                    "                \"@region\" : \"Russia\",\n" +
                    "                \"#number\" : \"8-900-000-00-00\"\n" +
                    "            },\n" +
                    "            \"date\" : {\n" +
                    "                \"@day\" : \"12\",\n" +
                    "                \"@month\" : \"12\",\n" +
                    "                \"@year\" : \"2018\",\n" +
                    "                \"#date\" : null\n" +
                    "            },\n" +
                    "            \"amount\" : {\n" +
                    "                \"@currency\" : \"EUR\",\n" +
                    "                \"#amount\" : \"1000.00\"\n" +
                    "            },\n" +
                    "            \"completed\" : \"true\"\n" +
                    "        },\n" +
                    "        {\n" +
                    "            \"id\" : \"67533244\",\n" +
                    "            \"number\" : {\n" +
                    "                \"@region\" : \"Russia\",\n" +
                    "                \"#number\" : \"8-900-000-00-01\"\n" +
                    "            },\n" +
                    "            \"date\" : {\n" +
                    "                \"@day\" : \"13\",\n" +
                    "                \"@month\" : \"12\",\n" +
                    "                \"@year\" : \"2018\",\n" +
                    "                \"#date\" : null\n" +
                    "            },\n" +
                    "            \"amount\" : {\n" +
                    "                \"@currency\" : \"RUB\",\n" +
                    "                \"#amount\" : \"2000.00\"\n" +
                    "            },\n" +
                    "            \"completed\" : \"true\"\n" +
                    "        },\n" +
                    "        {\n" +
                    "            \"id\" : \"67533257\",\n" +
                    "            \"number\" : {\n" +
                    "                \"@region\" : \"Russia\",\n" +
                    "                \"#number\" : \"8-900-000-00-02\"\n" +
                    "            },\n" +
                    "            \"date\" : {\n" +
                    "                \"@day\" : \"14\",\n" +
                    "                \"@month\" : \"12\",\n" +
                    "                \"@year\" : \"2018\",\n" +
                    "                \"#date\" : null\n" +
                    "            },\n" +
                    "            \"amount\" : {\n" +
                    "                \"@currency\" : \"EUR\",\n" +
                    "                \"#amount\" : \"3000.00\"\n" +
                    "            },\n" +
                    "            \"completed\" : \"false\"\n" +
                    "        },\n" +
                    "        {\n" +
                    "            \"id\" : \"67533259\",\n" +
                    "            \"number\" : {\n" +
                    "                \"@region\" : \"Ukraine\",\n" +
                    "                \"#number\" : \"8-900-000-00-03\"\n" +
                    "            },\n" +
                    "            \"date\" : {\n" +
                    "                \"@day\" : \"15\",\n" +
                    "                \"@month\" : \"12\",\n" +
                    "                \"@year\" : \"2018\",\n" +
                    "                \"#date\" : null\n" +
                    "            },\n" +
                    "            \"amount\" : {\n" +
                    "                \"@currency\" : \"GRN\",\n" +
                    "                \"#amount\" : \"4000.00\"\n" +
                    "            },\n" +
                    "            \"completed\" : \"false\"\n" +
                    "        },\n" +
                    "        {\n" +
                    "            \"id\" : \"67533566\",\n" +
                    "            \"number\" : {\n" +
                    "                \"@region\" : \"Ukraine\",\n" +
                    "                \"#number\" : \"8-900-000-00-04\"\n" +
                    "            },\n" +
                    "            \"date\" : {\n" +
                    "                \"@day\" : \"16\",\n" +
                    "                \"@month\" : \"12\",\n" +
                    "                \"@year\" : \"2018\",\n" +
                    "                \"#date\" : null\n" +
                    "            },\n" +
                    "            \"amount\" : {\n" +
                    "                \"@currency\" : \"USD\",\n" +
                    "                \"#amount\" : \"5000.00\"\n" +
                    "            },\n" +
                    "            \"completed\" : \"false\"\n" +
                    "        }\n" +
                    "    ]\n" +
                    "}"
            );



            allTests.put(
                "{\n" +
                    "    \"transaction\": {\n" +
                    "        \"id\": \"6753324\",\n" +
                    "        \"number\": {\n" +
                    "            \"@region\": \"Russia\",\n" +
                    "            \"#number\": \"8-900-000-000\"\n" +
                    "        },\n" +
                    "        \"special1\": false,\n" +
                    "        \"special2\": true,\n" +
                    "        \"empty1\": null,\n" +
                    "        \"empty2\": { },\n" +
                    "        \"empty3\": [ ],\n" +
                    "        \"empty4\": {},\n" +
                    "        \"empty5\": [],\n" +
                    "        \"empty6\": {\n" +
                    "\n" +
                    "        },\n" +
                    "        \"empty7\": [\n" +
                    "\n" +
                    "        ],\n" +
                    "        \"empty8\": \"\",\n" +
                    "        \"array1\": [\n" +
                    "            null, null\n" +
                    "        ],\n" +
                    "        \"array2\": [\n" +
                    "            [],\n" +
                    "            true, false, null,\n" +
                    "            123, 123.456,\n" +
                    "            \"\",\n" +
                    "            {\n" +
                    "                \"key1\": \"value1\",\n" +
                    "                \"key2\": {\n" +
                    "                    \"@attr\": \"value2\",\n" +
                    "                    \"#key2\": \"value3\"\n" +
                    "                }\n" +
                    "            },\n" +
                    "            {\n" +
                    "                \"@attr2\": \"value4\",\n" +
                    "                \"#element\": \"value5\"\n" +
                    "            }\n" +
                    "            ,\n" +
                    "            {\n" +
                    "                \"@attr3\": \"value4\",\n" +
                    "                \"#elem\": \"value5\"\n" +
                    "            },\n" +
                    "            {\n" +
                    "                \"#element\": null\n" +
                    "            },\n" +
                    "            {\n" +
                    "                \"#element\": {\n" +
                    "                    \"deep\": {\n" +
                    "                        \"@deepattr\": \"deepvalue\",\n" +
                    "                        \"#deep\": [\n" +
                    "                            1, 2, 3\n" +
                    "                        ]\n" +
                    "                    }\n" +
                    "                }\n" +
                    "            }\n" +
                    "        ],\n" +
                    "        \"inner1\": {\n" +
                    "            \"inner2\": {\n" +
                    "                \"inner3\": {\n" +
                    "                    \"key1\": \"value1\",\n" +
                    "                    \"key2\": \"value2\"\n" +
                    "                }\n" +
                    "            }\n" +
                    "        },\n" +
                    "        \"inner4\": {\n" +
                    "            \"@\": 123,\n" +
                    "            \"#inner4\": \"value3\"\n" +
                    "        },\n" +
                    "        \"inner5\": {\n" +
                    "            \"@attr1\": 123.456,\n" +
                    "            \"#inner4\": \"value4\"\n" +
                    "        },\n" +
                    "        \"inner6\": {\n" +
                    "            \"@attr2\": 789.321,\n" +
                    "            \"#inner6\": \"value5\"\n" +
                    "        },\n" +
                    "        \"inner7\": {\n" +
                    "            \"#inner7\": \"value6\"\n" +
                    "        },\n" +
                    "        \"inner8\": {\n" +
                    "            \"@attr3\": \"value7\"\n" +
                    "        },\n" +
                    "        \"inner9\": {\n" +
                    "            \"@attr4\": \"value8\",\n" +
                    "            \"#inner9\": \"value9\",\n" +
                    "            \"something\": \"value10\"\n" +
                    "        },\n" +
                    "        \"inner10\": {\n" +
                    "            \"@attr5\": null,\n" +
                    "            \"#inner10\": null\n" +
                    "        },\n" +
                    "        \"inner11\": {\n" +
                    "            \"@attr11\": \"value11\",\n" +
                    "            \"#inner11\": {\n" +
                    "                \"inner12\": {\n" +
                    "                    \"@attr12\": \"value12\",\n" +
                    "                    \"#inner12\": {\n" +
                    "                        \"inner13\": {\n" +
                    "                            \"@attr13\": \"value13\",\n" +
                    "                            \"#inner13\": {\n" +
                    "                                \"inner14\": \"v14\"\n" +
                    "                            }\n" +
                    "                        }\n" +
                    "                    }\n" +
                    "                }\n" +
                    "            }\n" +
                    "        },\n" +
                    "        \"inner15\": {\n" +
                    "            \"@\": null,\n" +
                    "            \"#\": null\n" +
                    "        },\n" +
                    "        \"inner16\": {\n" +
                    "            \"@somekey\": \"attrvalue\",\n" +
                    "            \"#inner16\": null,\n" +
                    "            \"somekey\": \"keyvalue\",\n" +
                    "            \"inner16\": \"notnull\"\n" +
                    "        },\n" +
                    "        \"crazyattr1\": {\n" +
                    "            \"@attr1\": 123,\n" +
                    "            \"#crazyattr1\": \"v15\"\n" +
                    "        },\n" +
                    "        \"crazyattr2\": {\n" +
                    "            \"@attr1\": 123.456,\n" +
                    "            \"#crazyattr2\": \"v16\"\n" +
                    "        },\n" +
                    "        \"crazyattr3\": {\n" +
                    "            \"@attr1\": null,\n" +
                    "            \"#crazyattr3\": \"v17\"\n" +
                    "        },\n" +
                    "        \"crazyattr4\": {\n" +
                    "            \"@attr1\": true,\n" +
                    "            \"#crazyattr4\": \"v18\"\n" +
                    "        },\n" +
                    "        \"crazyattr5\": {\n" +
                    "            \"@attr1\": false,\n" +
                    "            \"#crazyattr5\": \"v19\"\n" +
                    "        },\n" +
                    "        \"crazyattr6\": {\n" +
                    "            \"@attr1\": \"\",\n" +
                    "            \"#crazyattr6\": \"v20\"\n" +
                    "        },\n" +
                    "        \"crazyattr7\": {\n" +
                    "            \"@attr1\": {},\n" +
                    "            \"#crazyattr7\": \"v21\"\n" +
                    "        },\n" +
                    "        \"crazyattr9\": {\n" +
                    "            \"@attr1\": {\n" +
                    "                \"@\": 1,\n" +
                    "                \"#\": 2,\n" +
                    "                \"\": 3,\n" +
                    "                \"key\": 4\n" +
                    "            },\n" +
                    "            \"#crazyattr9\": \"v23\"\n" +
                    "        },\n" +
                    "        \"crazyattr10\": {\n" +
                    "            \"@attr1\": [],\n" +
                    "            \"#crazyattr10\": \"v24\"\n" +
                    "        },\n" +
                    "        \"crazyattr11\": {\n" +
                    "            \"attr1\": \"better\",\n" +
                    "            \"@attr1\": {\n" +
                    "                \"key9\": \"value9\"\n" +
                    "            },\n" +
                    "            \"#crazyattr11\": \"v25\"\n" +
                    "        },\n" +
                    "        \"crazyattr12\": {\n" +
                    "            \"@attr1\": [\n" +
                    "                \"\"\n" +
                    "            ],\n" +
                    "            \"#crazyattr12\": \"v26\"\n" +
                    "        },\n" +
                    "        \"\": {\n" +
                    "            \"#\": null,\n" +
                    "            \"secret\": \"won't be converted\"\n" +
                    "        },\n" +
                    "        \"@\": 123,\n" +
                    "        \"#\": [\n" +
                    "            1, 2, 3\n" +
                    "        ]\n" +
                    "    },\n" +
                    "    \"meta\": {\n" +
                    "        \"version\": 0.01\n" +
                    "    }\n" +
                    "}",


                "<root>\n" +
                    "    <transaction>\n" +
                    "        <id>6753324</id>\n" +
                    "        <number region=\"Russia\">8-900-000-000</number>\n" +
                    "        <special1>false</special1>\n" +
                    "        <special2>true</special2>\n" +
                    "        <empty1 />\n" +
                    "        <empty2></empty2>\n" +
                    "        <empty3></empty3>\n" +
                    "        <empty4></empty4>\n" +
                    "        <empty5></empty5>\n" +
                    "        <empty6></empty6>\n" +
                    "        <empty7></empty7>\n" +
                    "        <empty8></empty8>\n" +
                    "        <array1>\n" +
                    "            <element />\n" +
                    "            <element />\n" +
                    "        </array1>\n" +
                    "        <array2>\n" +
                    "            <element></element>\n" +
                    "            <element>true</element>\n" +
                    "            <element>false</element>\n" +
                    "            <element />\n" +
                    "            <element>123</element>\n" +
                    "            <element>123.456</element>\n" +
                    "            <element></element>\n" +
                    "            <element>\n" +
                    "                <key1>value1</key1>\n" +
                    "                <key2 attr=\"value2\">value3</key2>\n" +
                    "            </element>\n" +
                    "            <element attr2=\"value4\">value5</element>\n" +
                    "            <element>\n" +
                    "                <attr3>value4</attr3>\n" +
                    "                <elem>value5</elem>\n" +
                    "            </element>\n" +
                    "            <element />\n" +
                    "            <element>\n" +
                    "                <deep deepattr=\"deepvalue\">\n" +
                    "                    <element>1</element>\n" +
                    "                    <element>2</element>\n" +
                    "                    <element>3</element>\n" +
                    "                </deep>\n" +
                    "            </element>\n" +
                    "        </array2>\n" +
                    "        <inner1>\n" +
                    "            <inner2>\n" +
                    "                <inner3>\n" +
                    "                    <key1>value1</key1>\n" +
                    "                    <key2>value2</key2>\n" +
                    "                </inner3>\n" +
                    "            </inner2>\n" +
                    "        </inner1>\n" +
                    "        <inner4>\n" +
                    "            <inner4>value3</inner4>\n" +
                    "        </inner4>\n" +
                    "        <inner5>\n" +
                    "            <attr1>123.456</attr1>\n" +
                    "            <inner4>value4</inner4>\n" +
                    "        </inner5>\n" +
                    "        <inner6 attr2=\"789.321\">value5</inner6>\n" +
                    "        <inner7>value6</inner7>\n" +
                    "        <inner8>\n" +
                    "            <attr3>value7</attr3>\n" +
                    "        </inner8>\n" +
                    "        <inner9>\n" +
                    "            <attr4>value8</attr4>\n" +
                    "            <inner9>value9</inner9>\n" +
                    "            <something>value10</something>\n" +
                    "        </inner9>\n" +
                    "        <inner10 attr5=\"\" />\n" +
                    "        <inner11 attr11=\"value11\">\n" +
                    "            <inner12 attr12=\"value12\">\n" +
                    "                <inner13 attr13=\"value13\">\n" +
                    "                    <inner14>v14</inner14>\n" +
                    "                </inner13>\n" +
                    "            </inner12>\n" +
                    "        </inner11>\n" +
                    "        <inner15></inner15>\n" +
                    "        <inner16>\n" +
                    "            <somekey>keyvalue</somekey>\n" +
                    "            <inner16>notnull</inner16>\n" +
                    "        </inner16>\n" +
                    "        <crazyattr1 attr1=\"123\">v15</crazyattr1>\n" +
                    "        <crazyattr2 attr1=\"123.456\">v16</crazyattr2>\n" +
                    "        <crazyattr3 attr1=\"\">v17</crazyattr3>\n" +
                    "        <crazyattr4 attr1=\"true\">v18</crazyattr4>\n" +
                    "        <crazyattr5 attr1=\"false\">v19</crazyattr5>\n" +
                    "        <crazyattr6 attr1=\"\">v20</crazyattr6>\n" +
                    "        <crazyattr7 attr1=\"\">v21</crazyattr7>\n" +
                    "        <crazyattr9>\n" +
                    "            <attr1>\n" +
                    "                <key>4</key>\n" +
                    "            </attr1>\n" +
                    "            <crazyattr9>v23</crazyattr9>\n" +
                    "        </crazyattr9>\n" +
                    "        <crazyattr10 attr1=\"\">v24</crazyattr10>\n" +
                    "        <crazyattr11>\n" +
                    "            <attr1>better</attr1>\n" +
                    "            <crazyattr11>v25</crazyattr11>\n" +
                    "        </crazyattr11>\n" +
                    "        <crazyattr12>\n" +
                    "            <attr1>\n" +
                    "                <element></element>\n" +
                    "            </attr1>\n" +
                    "            <crazyattr12>v26</crazyattr12>\n" +
                    "        </crazyattr12>\n" +
                    "    </transaction>\n" +
                    "    <meta>\n" +
                    "        <version>0.01</version>\n" +
                    "    </meta>\n" +
                    "</root>"
            );


            allTests.put(
                "<root>\n" +
                    "    <transaction>\n" +
                    "        <id>6753325</id>\n" +
                    "        <number region='Russia'>8-900-000-000</number>\n" +
                    "        <special1>false</special1>\n" +
                    "        <special2>true</special2>\n" +
                    "        <empty1 />\n" +
                    "        <empty2></empty2>\n" +
                    "        <array1>\n" +
                    "            <element />\n" +
                    "            <element />\n" +
                    "        </array1>\n" +
                    "        <array2>\n" +
                    "            <element></element>\n" +
                    "            <element />\n" +
                    "            <element>123</element>\n" +
                    "            <element>123.456</element>\n" +
                    "            <element>\n" +
                    "                <key1>value1</key1>\n" +
                    "                <key2 attr=\"value2\">value3</key2>\n" +
                    "            </element>\n" +
                    "            <element attr2='value4'>value5</element>\n" +
                    "            <element>\n" +
                    "                <attr3>value4</attr3>\n" +
                    "                <elem>value5</elem>\n" +
                    "            </element>\n" +
                    "            <element>\n" +
                    "                <deep deepattr=\"deepvalue\">\n" +
                    "                    <element>1</element>\n" +
                    "                    <element>2</element>\n" +
                    "                    <element>3</element>\n" +
                    "                </deep>\n" +
                    "            </element>\n" +
                    "        </array2>\n" +
                    "        <inner1>\n" +
                    "            <inner2>\n" +
                    "                <inner3>\n" +
                    "                    <key1>value1</key1>\n" +
                    "                    <key2>value2</key2>\n" +
                    "                </inner3>\n" +
                    "            </inner2>\n" +
                    "        </inner1>\n" +
                    "        <inner4>\n" +
                    "            <inner4>value3</inner4>\n" +
                    "        </inner4>\n" +
                    "        <inner5>\n" +
                    "            <attr1>123.456</attr1>\n" +
                    "            <inner4>value4</inner4>\n" +
                    "        </inner5>\n" +
                    "        <inner6 attr2=\"789.321\">value5</inner6>\n" +
                    "        <inner7>value6</inner7>\n" +
                    "        <inner8>\n" +
                    "            <attr3>value7</attr3>\n" +
                    "        </inner8>\n" +
                    "        <inner9>\n" +
                    "            <attr4>value8</attr4>\n" +
                    "            <inner9>value9</inner9>\n" +
                    "            <something>value10</something>\n" +
                    "        </inner9>\n" +
                    "        <inner10 attr5='' />\n" +
                    "        <inner11 attr11=\"value11\">\n" +
                    "            <inner12 attr12=\"value12\">\n" +
                    "                <inner13 attr13=\"value13\">\n" +
                    "                    <inner14>v14</inner14>\n" +
                    "                </inner13>\n" +
                    "            </inner12>\n" +
                    "        </inner11>\n" +
                    "        <inner15></inner15>\n" +
                    "        <inner16>\n" +
                    "            <somekey>keyvalue</somekey>\n" +
                    "            <inner16>notnull</inner16>\n" +
                    "        </inner16>\n" +
                    "        <crazyattr1 attr1='123'>v15</crazyattr1>\n" +
                    "        <crazyattr2 attr1=\"123.456\">v16</crazyattr2>\n" +
                    "        <crazyattr3 attr1=''>v17</crazyattr3>\n" +
                    "        <crazyattr9>\n" +
                    "            <attr1>\n" +
                    "                <key>4</key>\n" +
                    "            </attr1>\n" +
                    "            <crazyattr9>v23</crazyattr9>\n" +
                    "        </crazyattr9>\n" +
                    "    </transaction>\n" +
                    "    <meta>\n" +
                    "        <version>0.01</version>\n" +
                    "    </meta>\n" +
                    "</root>",


                "{\n" +
                    "    \"root\": {\n" +
                    "        \"transaction\": {\n" +
                    "            \"id\": \"6753325\",\n" +
                    "            \"number\": {\n" +
                    "                \"@region\": \"Russia\",\n" +
                    "                \"#number\": \"8-900-000-000\"\n" +
                    "            },\n" +
                    "            \"special1\": \"false\",\n" +
                    "            \"special2\": \"true\",\n" +
                    "            \"empty1\": null,\n" +
                    "            \"empty2\": \"\",\n" +
                    "            \"array1\": [\n" +
                    "                null, null\n" +
                    "            ],\n" +
                    "            \"array2\": [\n" +
                    "                \"\",\n" +
                    "                null,\n" +
                    "                \"123\",\n" +
                    "                \"123.456\",\n" +
                    "                {\n" +
                    "                    \"key1\": \"value1\",\n" +
                    "                    \"key2\": {\n" +
                    "                        \"@attr\": \"value2\",\n" +
                    "                        \"#key2\": \"value3\"\n" +
                    "                    }\n" +
                    "                },\n" +
                    "                {\n" +
                    "                    \"@attr2\": \"value4\",\n" +
                    "                    \"#element\": \"value5\"\n" +
                    "                },\n" +
                    "                {\n" +
                    "                    \"attr3\": \"value4\",\n" +
                    "                    \"elem\": \"value5\"\n" +
                    "                },\n" +
                    "                {\n" +
                    "                    \"deep\": {\n" +
                    "                        \"@deepattr\": \"deepvalue\",\n" +
                    "                        \"#deep\": [\n" +
                    "                            \"1\",\n" +
                    "                            \"2\",\n" +
                    "                            \"3\"\n" +
                    "                        ]\n" +
                    "                    }\n" +
                    "                }\n" +
                    "            ],\n" +
                    "            \"inner1\": {\n" +
                    "                \"inner2\": {\n" +
                    "                    \"inner3\": {\n" +
                    "                        \"key1\": \"value1\",\n" +
                    "                        \"key2\": \"value2\"\n" +
                    "                    }\n" +
                    "                }\n" +
                    "            },\n" +
                    "            \"inner4\": {\n" +
                    "                \"inner4\": \"value3\"\n" +
                    "            },\n" +
                    "            \"inner5\": {\n" +
                    "                \"attr1\": \"123.456\",\n" +
                    "                \"inner4\": \"value4\"\n" +
                    "            },\n" +
                    "            \"inner6\": {\n" +
                    "                \"@attr2\": \"789.321\",\n" +
                    "                \"#inner6\": \"value5\"\n" +
                    "            },\n" +
                    "            \"inner7\": \"value6\",\n" +
                    "            \"inner8\": {\n" +
                    "                \"attr3\": \"value7\"\n" +
                    "            },\n" +
                    "            \"inner9\": {\n" +
                    "                \"attr4\": \"value8\",\n" +
                    "                \"inner9\": \"value9\",\n" +
                    "                \"something\": \"value10\"\n" +
                    "            },\n" +
                    "            \"inner10\": {\n" +
                    "                \"@attr5\": \"\",\n" +
                    "                \"#inner10\": null\n" +
                    "            },\n" +
                    "            \"inner11\": {\n" +
                    "                \"@attr11\": \"value11\",\n" +
                    "                \"#inner11\": {\n" +
                    "                    \"inner12\": {\n" +
                    "                        \"@attr12\": \"value12\",\n" +
                    "                        \"#inner12\": {\n" +
                    "                            \"inner13\": {\n" +
                    "                                \"@attr13\": \"value13\",\n" +
                    "                                \"#inner13\": {\n" +
                    "                                    \"inner14\": \"v14\"\n" +
                    "                                }\n" +
                    "                            }\n" +
                    "                        }\n" +
                    "                    }\n" +
                    "                }\n" +
                    "            },\n" +
                    "            \"inner15\": \"\",\n" +
                    "            \"inner16\": {\n" +
                    "                \"somekey\": \"keyvalue\",\n" +
                    "                \"inner16\": \"notnull\"\n" +
                    "            },\n" +
                    "            \"crazyattr1\": {\n" +
                    "                \"@attr1\": \"123\",\n" +
                    "                \"#crazyattr1\": \"v15\"\n" +
                    "            },\n" +
                    "            \"crazyattr2\": {\n" +
                    "                \"@attr1\": \"123.456\",\n" +
                    "                \"#crazyattr2\": \"v16\"\n" +
                    "            },\n" +
                    "            \"crazyattr3\": {\n" +
                    "                \"@attr1\": \"\",\n" +
                    "                \"#crazyattr3\": \"v17\"\n" +
                    "            },\n" +
                    "            \"crazyattr9\": {\n" +
                    "                \"attr1\": {\n" +
                    "                    \"key\": \"4\"\n" +
                    "                },\n" +
                    "                \"crazyattr9\": \"v23\"\n" +
                    "            }\n" +
                    "        },\n" +
                    "        \"meta\": {\n" +
                    "            \"version\": \"0.01\"\n" +
                    "        }\n" +
                    "    }\n" +
                    "}"
            );


            allTests.put(
                "{\"transaction\":{\"id\":\"6753326\",\"number\":{\"@region\":\"Russia\",\"#number\":\"8-900-000-000\"},\"special1\":false,\"special2\":true,\"empty1\":null,\"empty2\":{},\"empty3\":[],\"empty4\":{},\"empty5\":[],\"empty6\":{},\"empty7\":[],\"empty8\":\"\",\"array1\":[null,null],\"array2\":[[],true,false,null,123,123.456,\"\",{\"key1\":\"value1\",\"key2\":{\"@attr\":\"value2\",\"#key2\":\"value3\"}},{\"@attr2\":\"value4\",\"#element\":\"value5\"},{\"@attr3\":\"value4\",\"#elem\":\"value5\"},{\"#element\":null},{\"#element\":{\"deep\":{\"@deepattr\":\"deepvalue\",\"#deep\":[1,2,3]}}}],\"inner1\":{\"inner2\":{\"inner3\":{\"key1\":\"value1\",\"key2\":\"value2\"}}},\"inner4\":{\"@\":123,\"#inner4\":\"value3\"},\"inner5\":{\"@attr1\":123.456,\"#inner4\":\"value4\"},\"inner6\":{\"@attr2\":789.321,\"#inner6\":\"value5\"},\"inner7\":{\"#inner7\":\"value6\"},\"inner8\":{\"@attr3\":\"value7\"},\"inner9\":{\"@attr4\":\"value8\",\"#inner9\":\"value9\",\"something\":\"value10\"},\"inner10\":{\"@attr5\":null,\"#inner10\":null},\"inner11\":{\"@attr11\":\"value11\",\"#inner11\":{\"inner12\":{\"@attr12\":\"value12\",\"#inner12\":{\"inner13\":{\"@attr13\":\"value13\",\"#inner13\":{\"inner14\":\"v14\"}}}}}},\"inner15\":{\"@\":null,\"#\":null},\"inner16\":{\"@somekey\":\"attrvalue\",\"#inner16\":null,\"somekey\":\"keyvalue\",\"inner16\":\"notnull\"},\"crazyattr1\":{\"@attr1\":123,\"#crazyattr1\":\"v15\"},\"crazyattr2\":{\"@attr1\":123.456,\"#crazyattr2\":\"v16\"},\"crazyattr3\":{\"@attr1\":null,\"#crazyattr3\":\"v17\"},\"crazyattr4\":{\"@attr1\":true,\"#crazyattr4\":\"v18\"},\"crazyattr5\":{\"@attr1\":false,\"#crazyattr5\":\"v19\"},\"crazyattr6\":{\"@attr1\":\"\",\"#crazyattr6\":\"v20\"},\"crazyattr7\":{\"@attr1\":{},\"#crazyattr7\":\"v21\"},\"crazyattr9\":{\"@attr1\":{\"@\":1,\"#\":2,\"\":3,\"key\":4},\"#crazyattr9\":\"v23\"},\"crazyattr10\":{\"@attr1\":[],\"#crazyattr10\":\"v24\"},\"crazyattr11\":{\"attr1\":\"better\",\"@attr1\":{\"key9\":\"value9\"},\"#crazyattr11\":\"v25\"},\"crazyattr12\":{\"@attr1\":[\"\"],\"#crazyattr12\":\"v26\"},\"\":{\"#\":null,\"secret\":\"won't be converted\"},\"@\":123,\"#\":[1,2,3]},\"meta\":{\"version\":0.01}}",


                "<root>\n" +
                    "    <transaction>\n" +
                    "        <id>6753326</id>\n" +
                    "        <number region=\"Russia\">8-900-000-000</number>\n" +
                    "        <special1>false</special1>\n" +
                    "        <special2>true</special2>\n" +
                    "        <empty1 />\n" +
                    "        <empty2></empty2>\n" +
                    "        <empty3></empty3>\n" +
                    "        <empty4></empty4>\n" +
                    "        <empty5></empty5>\n" +
                    "        <empty6></empty6>\n" +
                    "        <empty7></empty7>\n" +
                    "        <empty8></empty8>\n" +
                    "        <array1>\n" +
                    "            <element />\n" +
                    "            <element />\n" +
                    "        </array1>\n" +
                    "        <array2>\n" +
                    "            <element></element>\n" +
                    "            <element>true</element>\n" +
                    "            <element>false</element>\n" +
                    "            <element />\n" +
                    "            <element>123</element>\n" +
                    "            <element>123.456</element>\n" +
                    "            <element></element>\n" +
                    "            <element>\n" +
                    "                <key1>value1</key1>\n" +
                    "                <key2 attr=\"value2\">value3</key2>\n" +
                    "            </element>\n" +
                    "            <element attr2=\"value4\">value5</element>\n" +
                    "            <element>\n" +
                    "                <attr3>value4</attr3>\n" +
                    "                <elem>value5</elem>\n" +
                    "            </element>\n" +
                    "            <element />\n" +
                    "            <element>\n" +
                    "                <deep deepattr=\"deepvalue\">\n" +
                    "                    <element>1</element>\n" +
                    "                    <element>2</element>\n" +
                    "                    <element>3</element>\n" +
                    "                </deep>\n" +
                    "            </element>\n" +
                    "        </array2>\n" +
                    "        <inner1>\n" +
                    "            <inner2>\n" +
                    "                <inner3>\n" +
                    "                    <key1>value1</key1>\n" +
                    "                    <key2>value2</key2>\n" +
                    "                </inner3>\n" +
                    "            </inner2>\n" +
                    "        </inner1>\n" +
                    "        <inner4>\n" +
                    "            <inner4>value3</inner4>\n" +
                    "        </inner4>\n" +
                    "        <inner5>\n" +
                    "            <attr1>123.456</attr1>\n" +
                    "            <inner4>value4</inner4>\n" +
                    "        </inner5>\n" +
                    "        <inner6 attr2=\"789.321\">value5</inner6>\n" +
                    "        <inner7>value6</inner7>\n" +
                    "        <inner8>\n" +
                    "            <attr3>value7</attr3>\n" +
                    "        </inner8>\n" +
                    "        <inner9>\n" +
                    "            <attr4>value8</attr4>\n" +
                    "            <inner9>value9</inner9>\n" +
                    "            <something>value10</something>\n" +
                    "        </inner9>\n" +
                    "        <inner10 attr5=\"\" />\n" +
                    "        <inner11 attr11=\"value11\">\n" +
                    "            <inner12 attr12=\"value12\">\n" +
                    "                <inner13 attr13=\"value13\">\n" +
                    "                    <inner14>v14</inner14>\n" +
                    "                </inner13>\n" +
                    "            </inner12>\n" +
                    "        </inner11>\n" +
                    "        <inner15></inner15>\n" +
                    "        <inner16>\n" +
                    "            <somekey>keyvalue</somekey>\n" +
                    "            <inner16>notnull</inner16>\n" +
                    "        </inner16>\n" +
                    "        <crazyattr1 attr1=\"123\">v15</crazyattr1>\n" +
                    "        <crazyattr2 attr1=\"123.456\">v16</crazyattr2>\n" +
                    "        <crazyattr3 attr1=\"\">v17</crazyattr3>\n" +
                    "        <crazyattr4 attr1=\"true\">v18</crazyattr4>\n" +
                    "        <crazyattr5 attr1=\"false\">v19</crazyattr5>\n" +
                    "        <crazyattr6 attr1=\"\">v20</crazyattr6>\n" +
                    "        <crazyattr7 attr1=\"\">v21</crazyattr7>\n" +
                    "        <crazyattr9>\n" +
                    "            <attr1>\n" +
                    "                <key>4</key>\n" +
                    "            </attr1>\n" +
                    "            <crazyattr9>v23</crazyattr9>\n" +
                    "        </crazyattr9>\n" +
                    "        <crazyattr10 attr1=\"\">v24</crazyattr10>\n" +
                    "        <crazyattr11>\n" +
                    "            <attr1>better</attr1>\n" +
                    "            <crazyattr11>v25</crazyattr11>\n" +
                    "        </crazyattr11>\n" +
                    "        <crazyattr12>\n" +
                    "            <attr1>\n" +
                    "                <element></element>\n" +
                    "            </attr1>\n" +
                    "            <crazyattr12>v26</crazyattr12>\n" +
                    "        </crazyattr12>\n" +
                    "    </transaction>\n" +
                    "    <meta>\n" +
                    "        <version>0.01</version>\n" +
                    "    </meta>\n" +
                    "</root>"
            );


            allTests.put(
                "<root><transaction><id>6753327</id><number region='Russia'>8-900-000-000</number><special1>false</special1><special2>true</special2><empty1 /><empty2></empty2><array1><element /><element /></array1><array2><element></element><element /><element>123</element><element>123.456</element><element><key1>value1</key1><key2 attr=\"value2\">value3</key2></element><element attr2='value4'>value5</element><element><attr3>value4</attr3><elem>value5</elem></element><element><deep deepattr=\"deepvalue\"><element>1</element><element>2</element><element>3</element></deep></element></array2><inner1><inner2><inner3><key1>value1</key1><key2>value2</key2></inner3></inner2></inner1><inner4><inner4>value3</inner4></inner4><inner5><attr1>123.456</attr1><inner4>value4</inner4></inner5><inner6 attr2=\"789.321\">value5</inner6><inner7>value6</inner7><inner8><attr3>value7</attr3></inner8><inner9><attr4>value8</attr4><inner9>value9</inner9><something>value10</something></inner9><inner10 attr5='' /><inner11 attr11=\"value11\"><inner12 attr12=\"value12\"><inner13 attr13=\"value13\"><inner14>v14</inner14></inner13></inner12></inner11><inner15></inner15><inner16><somekey>keyvalue</somekey><inner16>notnull</inner16></inner16><crazyattr1 attr1='123'>v15</crazyattr1><crazyattr2 attr1=\"123.456\">v16</crazyattr2><crazyattr3 attr1=''>v17</crazyattr3><crazyattr9><attr1><key>4</key></attr1><crazyattr9>v23</crazyattr9></crazyattr9></transaction><meta><version>0.01</version></meta></root>",


                "{\n" +
                    "    \"root\": {" +
                    "        \"transaction\": {\n" +
                    "            \"id\": \"6753327\",\n" +
                    "            \"number\": {\n" +
                    "                \"@region\": \"Russia\",\n" +
                    "                \"#number\": \"8-900-000-000\"\n" +
                    "            },\n" +
                    "            \"special1\": \"false\",\n" +
                    "            \"special2\": \"true\",\n" +
                    "            \"empty1\": null,\n" +
                    "            \"empty2\": \"\",\n" +
                    "            \"array1\": [\n" +
                    "                null, null\n" +
                    "            ],\n" +
                    "            \"array2\": [\n" +
                    "                \"\",\n" +
                    "                null,\n" +
                    "                \"123\",\n" +
                    "                \"123.456\",\n" +
                    "                {\n" +
                    "                    \"key1\": \"value1\",\n" +
                    "                    \"key2\": {\n" +
                    "                        \"@attr\": \"value2\",\n" +
                    "                        \"#key2\": \"value3\"\n" +
                    "                    }\n" +
                    "                },\n" +
                    "                {\n" +
                    "                    \"@attr2\": \"value4\",\n" +
                    "                    \"#element\": \"value5\"\n" +
                    "                },\n" +
                    "                {\n" +
                    "                    \"attr3\": \"value4\",\n" +
                    "                    \"elem\": \"value5\"\n" +
                    "                },\n" +
                    "                {\n" +
                    "                    \"deep\": {\n" +
                    "                        \"@deepattr\": \"deepvalue\",\n" +
                    "                        \"#deep\": [\n" +
                    "                            \"1\",\n" +
                    "                            \"2\",\n" +
                    "                            \"3\"\n" +
                    "                        ]\n" +
                    "                    }\n" +
                    "                }\n" +
                    "            ],\n" +
                    "            \"inner1\": {\n" +
                    "                \"inner2\": {\n" +
                    "                    \"inner3\": {\n" +
                    "                        \"key1\": \"value1\",\n" +
                    "                        \"key2\": \"value2\"\n" +
                    "                    }\n" +
                    "                }\n" +
                    "            },\n" +
                    "            \"inner4\": {\n" +
                    "                \"inner4\": \"value3\"\n" +
                    "            },\n" +
                    "            \"inner5\": {\n" +
                    "                \"attr1\": \"123.456\",\n" +
                    "                \"inner4\": \"value4\"\n" +
                    "            },\n" +
                    "            \"inner6\": {\n" +
                    "                \"@attr2\": \"789.321\",\n" +
                    "                \"#inner6\": \"value5\"\n" +
                    "            },\n" +
                    "            \"inner7\": \"value6\",\n" +
                    "            \"inner8\": {\n" +
                    "                \"attr3\": \"value7\"\n" +
                    "            },\n" +
                    "            \"inner9\": {\n" +
                    "                \"attr4\": \"value8\",\n" +
                    "                \"inner9\": \"value9\",\n" +
                    "                \"something\": \"value10\"\n" +
                    "            },\n" +
                    "            \"inner10\": {\n" +
                    "                \"@attr5\": \"\",\n" +
                    "                \"#inner10\": null\n" +
                    "            },\n" +
                    "            \"inner11\": {\n" +
                    "                \"@attr11\": \"value11\",\n" +
                    "                \"#inner11\": {\n" +
                    "                    \"inner12\": {\n" +
                    "                        \"@attr12\": \"value12\",\n" +
                    "                        \"#inner12\": {\n" +
                    "                            \"inner13\": {\n" +
                    "                                \"@attr13\": \"value13\",\n" +
                    "                                \"#inner13\": {\n" +
                    "                                    \"inner14\": \"v14\"\n" +
                    "                                }\n" +
                    "                            }\n" +
                    "                        }\n" +
                    "                    }\n" +
                    "                }\n" +
                    "            },\n" +
                    "            \"inner15\": \"\",\n" +
                    "            \"inner16\": {\n" +
                    "                \"somekey\": \"keyvalue\",\n" +
                    "                \"inner16\": \"notnull\"\n" +
                    "            },\n" +
                    "            \"crazyattr1\": {\n" +
                    "                \"@attr1\": \"123\",\n" +
                    "                \"#crazyattr1\": \"v15\"\n" +
                    "            },\n" +
                    "            \"crazyattr2\": {\n" +
                    "                \"@attr1\": \"123.456\",\n" +
                    "                \"#crazyattr2\": \"v16\"\n" +
                    "            },\n" +
                    "            \"crazyattr3\": {\n" +
                    "                \"@attr1\": \"\",\n" +
                    "                \"#crazyattr3\": \"v17\"\n" +
                    "            },\n" +
                    "            \"crazyattr9\": {\n" +
                    "                \"attr1\": {\n" +
                    "                    \"key\": \"4\"\n" +
                    "                },\n" +
                    "                \"crazyattr9\": \"v23\"\n" +
                    "            }\n" +
                    "        },\n" +
                    "        \"meta\": {\n" +
                    "            \"version\": \"0.01\"\n" +
                    "        }\n" +
                    "    }\n" +
                    "}"
            );
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            for (String input : allTests.keySet()) {
                String answer = allTests.get(input);

                TestCase<Clue> test = new TestCase<>();
                test.addFile("test.txt", input);
                test.setAttach(new Clue(answer, input));

                tests.add(test);
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            String user = reply.strip();
            String answer = clue.answer.strip();

            if (user.length() == 0) {
                return new CheckResult(false,
                    "Your output is empty line.");
            }

            CheckResult result;

            if (user.charAt(0) != '<' && user.charAt(0) != '{') {
                return new CheckResult(false,
                    "Your first symbol is wrong - " +
                        " should be '{' or '<'");
            }

            try {
                if (user.charAt(0) == '<' && answer.charAt(0) == '<') {
                    result = isEqualXMLs(user, answer);
                } else if (user.charAt(0) == '{' && answer.charAt(0) == '{') {
                    result = isEqualJSONs(user, answer);
                } else {
                    return new CheckResult(false,
                        "Your first symbol is wrong - " +
                            "'{' instead of '<' or vice versa" + "\n\n" + user + "\n\n" + answer);
                }
            } catch (Exception ex) {
                return new CheckResult(false,
                    "Can't check the output - invalid XML or JSON");
            }

            return result;
        }

        public static Element stringToXML(String str) throws Exception {
            DocumentBuilderFactory factory =
                DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();

            ByteArrayInputStream input = new ByteArrayInputStream(
                str.getBytes("UTF-8"));

            Document document = builder.parse(input);

            return document.getDocumentElement();
        }


        public static CheckResult isEqualXMLs(String s1, String s2) throws Exception {
            Element elem1 = stringToXML(s1);
            Element elem2 = stringToXML(s2);

            CheckResult result = isEqualXMLElements(elem1, elem2);

            if (!result.isCorrect()) {
                return result;
            } else {
                return isEqualXMLElements(elem2, elem1);
            }
        }

        public static CheckResult isEqualXMLElements(Element e1, Element e2) {
            // test name
            if (!e1.getNodeName().equals(e2.getNodeName())) {
                return new CheckResult(false,
                    "In XML: element name is incorrect");
            }

            // test attributes
            NamedNodeMap attributes = e1.getAttributes();
            for (int i = 0; i < attributes.getLength(); i++) {
                Attr attr = (Attr) attributes.item(i);

                String name = attr.getName();

                if (!e2.hasAttribute(name)) {
                    return new CheckResult(false,
                        "In XML: element doesn't have " +
                            "an attribute or has an excess attribute");
                }

                if (!attr.getValue().equals(e2.getAttribute(name))) {
                    return new CheckResult(false,
                        "In XML: element has an attribute " +
                            "but their values don't match");
                }
            }

            // test chidls
            if (e1.hasChildNodes() != e2.hasChildNodes()) {
                return new CheckResult(false,
                    "In XML: element doesn't have needed " +
                        "child nodes or has excess child nodes");
            }

            if (!e1.hasChildNodes()) {
                return CheckResult.correct();
            }

            NodeList childs1 = e1.getChildNodes();
            NodeList childs2 = e2.getChildNodes();

            List<Element> filteredChilds1 = new ArrayList<>();
            List<Element> filteredChilds2 = new ArrayList<>();

            for (int i = 0; i < childs1.getLength(); i++) {
                Object item = childs1.item(i);
                if (item instanceof Element) {
                    filteredChilds1.add((Element) childs1.item(i));
                }
            }

            for (int i = 0; i < childs2.getLength(); i++) {
                Object item = childs2.item(i);
                if (item instanceof Element) {
                    filteredChilds2.add((Element) childs2.item(i));
                }
            }

            if (filteredChilds1.size() != filteredChilds2.size()) {
                return new CheckResult(false,
                    "In XML: element doesn't have needed " +
                        "child nodes or has excess child nodes");
            }

            for (int i = 0; i < filteredChilds1.size(); i++) {

                Element elem1 = filteredChilds1.get(i);
                Element elem2 = filteredChilds2.get(i);

                CheckResult result = isEqualXMLElements(elem1, elem2);
                if (!result.isCorrect()) {
                    return result;
                }
            }

            return CheckResult.correct();
        }

        public static JsonElement stringToJSON(String str) {
            return new JsonParser().parse(str);
        }


        public static CheckResult isEqualJSONs(String s1, String s2) {
            JsonElement elem1 = stringToJSON(s1);
            JsonElement elem2 = stringToJSON(s2);

            CheckResult result = isEqualJSONElements(elem1, elem2);

            if (!result.isCorrect()) {
                return result;
            } else {
                return isEqualJSONElements(elem2, elem1);
            }
        }

        public static CheckResult isEqualJSONElements(JsonElement e1, JsonElement e2) {

            // check for null
            if (e1.isJsonNull() != e2.isJsonNull()) {
                return new CheckResult(false,
                    "In JSON: expected null but found something else " +
                        "(or vice versa)");
            }
            if (e1.isJsonNull()) {
                return CheckResult.correct();
            }


            // check for primitives
            if (e1.isJsonPrimitive() != e2.isJsonPrimitive()) {
                // number and boolean are also may be expected but
                // after converting from XML there can be only strings
                return new CheckResult(false,
                    "In JSON: expected string " +
                        "but found something else (or vice versa)");
            }
            if (e1.isJsonPrimitive()) {
                JsonPrimitive prim1 = e1.getAsJsonPrimitive();
                JsonPrimitive prim2 = e2.getAsJsonPrimitive();
                return compareJSONPrimitives(prim1, prim2);
            }


            // check for arrays
            if (e1.isJsonArray() != e2.isJsonArray()) {
                return new CheckResult(false,
                    "In JSON: expected array " +
                        "but found something else (or vice versa)");
            }
            if (e1.isJsonArray()) {
                JsonArray arr1 = e1.getAsJsonArray();
                JsonArray arr2 = e2.getAsJsonArray();
                return compareJSONArrays(arr1, arr2);
            }


            // check for objects
            if (e1.isJsonObject() != e2.isJsonObject()) {
                return new CheckResult(false,
                    "In JSON: expected object " +
                        "but found something else (or vice versa)");
            }
            if (e1.isJsonObject()) {
                JsonObject obj1 = e1.getAsJsonObject();
                JsonObject obj2 = e2.getAsJsonObject();
                return compareJSONObjects(obj1, obj2);
            }

            return CheckResult.correct();
        }


        public static CheckResult compareJSONPrimitives(JsonPrimitive prim1,
                                                        JsonPrimitive prim2) {

            if (prim1.isBoolean() && prim2.isBoolean()) {
                return new CheckResult(
                    prim1.getAsBoolean() == prim2.getAsBoolean(),
                    "In JSON: two boolean values don't match");
            }
            if (prim1.isNumber() && prim2.isNumber()) {
                BigDecimal num1 = prim1.getAsBigDecimal();
                BigDecimal num2 = prim2.getAsBigDecimal();
                return new CheckResult(num1.equals(num2),
                    "In JSON: two number values don't match");
            }
            if (prim1.isString() && prim2.isString()) {
                String num1 = prim1.getAsString();
                String num2 = prim2.getAsString();
                return new CheckResult(num1.equals(num2),
                    "In JSON: two string values don't match");
            }


            if (prim1.isString() && prim2.isNumber() ||
                prim1.isNumber() && prim2.isString()) {

                return new CheckResult(false,
                    "In JSON: expected string value but " +
                        "found number (or vice versa)");
            }
            if (prim1.isString() && prim2.isBoolean() ||
                prim1.isBoolean() && prim2.isString()) {

                return new CheckResult(false,
                    "In JSON: expected string value but " +
                        "found boolean (or vice versa)");
            }
            if (prim1.isNumber() && prim2.isBoolean() ||
                prim1.isBoolean() && prim2.isNumber()) {

                return new CheckResult(false,
                    "In JSON: expected number value but " +
                        "found boolean (or vice versa)");
            }

            return CheckResult.correct();
        }

        public static CheckResult compareJSONArrays(JsonArray arr1, JsonArray arr2) {
            if (arr1.size() != arr2.size()) {
                return new CheckResult(false,
                    "In JSON: array size is incorrect");
            }

            for (int i = 0; i < arr1.size(); i++) {
                JsonElement elem1 = arr1.get(i);
                JsonElement elem2 = arr2.get(i);

                CheckResult result = isEqualJSONElements(elem1, elem2);
                if (!result.isCorrect()) {
                    return result;
                }
            }

            return CheckResult.correct();
        }

        public static CheckResult compareJSONObjects(JsonObject obj1, JsonObject obj2) {

            for (String key : obj1.keySet()) {
                if (!obj2.has(key)) {
                    return new CheckResult(false,
                        "In JSON: object doesn't have " +
                            "needed key or has an excess key");
                }

                JsonElement value1 = obj1.get(key);
                JsonElement value2 = obj2.get(key);

                CheckResult result = isEqualJSONElements(value1, value2);
                if (!result.isCorrect()) {
                    return result;
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/converter/presentation/XMLDirector.java
  visible: true
  text: |-
    package converter.presentation;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Stack;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class XMLDirector {
        private String content;
        private XMLBuilder builder = new XMLBuilder(true);
        private JSONParser parser = new JSONParser();
        private Stack<String> jsonStructure = new Stack<>();
        private Stack<String> arrays = new Stack<>();

        private void printPath() {
            for (String string : jsonStructure) {
                if (!string.startsWith("#")) {
                    System.out.print(string);
                    if (!string.equals(jsonStructure.peek())) {
                        System.out.print(", ");
                    }
                }
            }
            System.out.println();
        }

        private void parseElement(List<String> lines) {
            // lines.forEach(System.out::println);
            /*if (Math.random() != 2.00) {
                throw new StackOverflowError();
            }*/

            String name;

            for (String line : lines) {
                //  System.out.println(line);
                if (line.matches(".+?(\\s*?\\{)")) {
                    name = parser.extractName(line);
                    jsonStructure.add(name);
                    builder.createContainer(jsonStructure, name);
                } else if (line.matches("},?")){
                    builder.goUp();
                    jsonStructure.pop();
                } else {
                    if (line.matches("\"@.+")) {
                        Pair<String, String> pair = parser.extractAttribute(line);
                        builder.addAttribute(pair.getFirst(), pair.getSecond());
                    } else {
                        if (line.matches("\"#.+?\"\\s*?:\\s*?((\".*?\")|(null)),?")) {
                            if (jsonStructure.peek().equals(parser.extractName(line).substring(1))) {
                                builder.setValue(parser.getValue(line));
                            } else {
                                builder.createSingleElement(
                                        parser.extractName(line).substring(1),
                                        parser.getValue(line),
                                        jsonStructure);
                                builder.stripAttributes();
                            }

                        } else {
                            String[] elem = parser.getElement(line);
                            builder.createSingleElement(elem[0], elem[1], jsonStructure);
                        }
                    }
                }
            }

            builder.print();

            List<PseudoElement> requests = builder.result();
            jsonStructure.clear();
            builder = new XMLBuilder(false);

    //        requests.forEach(System.out::println);

            for (PseudoElement request : requests) {
                if (request.isGoUp()) {
                    builder.createEnd(jsonStructure.peek(), jsonStructure.size());
                    jsonStructure.pop();
                } else if (request.isParent()) {
                    builder.addContainer(request.getName(), request.getAttributes(),
                            jsonStructure.size());
                    jsonStructure.push(request.getName());
                } else {
                    builder.createSingleElement(request.getName(),
                            request.getValue(), request.getAttributes(),
                            jsonStructure.size());
                }
            }

            builder.getResult();
        }

        public XMLDirector(String content) {
            this.content = content;
        }

        private String insertCharAt(String string, int character) {
            return string.substring(0, character) +
                    "\n" + string.substring(character);
        }

        private List<String> beatifyJSON(String json) {
            Pattern pattern = Pattern.compile("(\"|false|true|null|\\d)(?=\\s*?[}\\]])|(\\s*?,|[}\\]](?!,))|\\[|\\{(?=\\s*?\")");
            Matcher matcher = pattern.matcher(json);
            List<Integer> newlineChars = new ArrayList<>();

            while (matcher.find()) {
                newlineChars.add(matcher.end());
            }

            for (int i = 0; i < newlineChars.size(); i++) {
                json = insertCharAt(json, newlineChars.get(i) + i);
            }

            List<String> lines = new ArrayList<>(Arrays.asList(json.split("\n")));
            for (int i = 0; i < lines.size(); i++) {
                lines.set(i, lines.get(i).trim());
            }

            for (int i = 0; i < lines.size() - 1; i++) {
                if (lines.get(i).trim().equals("}") && lines.get(i + 1).trim().equals(",")) {
                    String brace = lines.get(i);
                    String dot = lines.get(i + 1);
                    brace = brace.concat(dot);
                    lines.set(i, brace);
                    lines.remove(i + 1);
                }
            }

            for (int i = 0; i < lines.size(); i++) {
                if (lines.get(i).matches("(?:\\s*?\".+?\"\\s*?:\\s*?\\[)|(?:\\s*?\\[)")) {
                    arrays.push("array");
                    lines.set(i, lines.get(i).replace("[", "{"));
                }

                if (arrays.size() > 0 &&
                        lines.get(i)
                                .matches("(?:null|true|false|-?\\d+(?:\\.\\d+)?|\\[|(?<!:)\\s*?\".*?\"|\\s*?\\{|(?:\\s*?[\\[{]\\s*?[\\]}]))\\s*?,?")) {
                    if (!lines.get(i).matches("\".+?\"\\s*?:\\s*?.+")) {
                        String newLine = "\"element\":".concat(lines.get(i));
                        lines.set(i, newLine);
                    }
                }

                if (lines.get(i).matches("\\s*?],?")) {
                    //System.out.println(lines.get(i));
                    arrays.pop();
                    lines.set(i, lines.get(i).replace("]", "}"));
                }
            }

            for (int i = 0; i < lines.size() - 1; i++) {
                if (lines.get(i).matches("\\s*?\"@.+?\"\\s*?:\\s*?\\{")
                        && lines.get(i + 1).matches("\\s*?},?")) {
                    String newAttr = lines.get(i).replace("{", "\"\"");
                    lines.set(i, newAttr);
                    lines.remove(i + 1);
                }
            }


            return lines;
        }

        public void startConversion() {
            content = content.replaceAll("\\r\\n|\\r|\\n|\\t", " ");
            content = content.trim().substring(1, content.length() - 1).trim();
            parseElement(beatifyJSON(content));
        }
    }
  learner_created: true
- name: src/converter/presentation/JSON.java
  visible: true
  text: |-
    package converter.presentation;

    import java.util.*;

    public class JSON {
        private String name;
        private String value;
        private Map<String, String> attributes = new LinkedHashMap<>();
        private List<JSON> children = new ArrayList<>();
        private static JSON current;
        private JSON parent;
        private boolean isInvalid = false;
        private boolean stripped = false;
        private Set<String> additionHistory = new LinkedHashSet<>();
        private static List<PseudoElement> requests = new ArrayList<>();

        private JSON(String name) {

                this.name = name;

        }

        public void setValue(String value, boolean add) {

            if (current.isInvalid) {
                current.addChild(current.name, true);
                current.setValue(value, false);
                current.goUp();
            } else {
                current.value = value;
            }

            if (add) {
                current.additionHistory.add("#" + current.name);
            }
        }

        public void addAttribute(String key, String value) {
            if (value.replaceAll("\\s", "").equals("{}")) {
                value = "";
            }

            current.additionHistory.add(key);
            if (value.endsWith(",")) {
                current.attributes.put(key, value.substring(value.length() - 1));
            } else {
                current.attributes.put(key, value);
            }
        }

        public void addChild(String name, boolean toAdd) {
            boolean isValid = true;

            if (toAdd) {
                current.additionHistory.add("#" + current.name);
            }

            if (name.length() >= 1) {
                if (current.name.equals(name.substring(1)) && name.startsWith("#") && current.isInvalid) {
                    isValid = false;
                }
            }


            if (current.value != null) {
                current.isInvalid = true;
            }

            if (name.startsWith("@")) {
                current.isInvalid = true;
            }

            current.children.add(new JSON(name));
            current.children.get(current.children.size() - 1).parent = current;
            current = current.children.get(current.children.size() - 1);

            if (!isValid) {
                current.isInvalid = true;
            }
        }

        public void stripAttributes() {
            Map<String, String> map = current.attributes;

            map.forEach((key, value) -> {
                addChild(key, false);
                setValue(value, false);
                goUp();
                current.stripped = true;
            });

            if (current.value != null) {
                String val = current.value;
                addChild("#" + current.name, false);
                setValue(val, false);
                goUp();
            }

            if (current.children.size() > 0) {
                if (current.children.get(0).name.equals(current.name)
                        && current.name.startsWith("#")
                        && current.value == null
                        && current.children.get(0).value != null) {
                    current.value = current.children.get(0).value;
                    current.children.clear();
                }
            }


            current.isInvalid = true;
            current.attributes.clear();
        }

        public static JSON root() {
            //JSON json = new JSON("root");
            JSON json = new JSON("root");
            current = json;
            return json;
        }

        private String printPath() {
            if (!name.startsWith("#") || isInvalid) {
                StringBuilder builder = new StringBuilder();

                if (name.startsWith("@")) {
                    isInvalid = true;
                }

                if (isInvalid && name.startsWith("@") || name.startsWith("#")) {
                    builder.insert(0, name.substring(1));
                } else {
                    //System.out.println(name);
                    //if(!name.equalsIgnoreCase("root")){
                        builder.insert(0,name);
                    //}

                }


                if (parent != null) {
                    builder.insert(0, ", ");
                    builder.insert(0, parent.printPath());
                }

                return builder.toString();
            }

            return parent.printPath();


        }

        private int count = 0;

        public void print() {
            String curVal = value;
            Map<String, String > curAttr = new LinkedHashMap<>();

            if (name.length() != 0) {
                if ((name.startsWith("#") || name.startsWith("@")) && isInvalid) {
                    name = name.substring(1);
                }

                if (!name.startsWith("#") || isInvalid) {

                    //String paths = printPath().replace("root, ", "").strip();
                    //if (!paths.equalsIgnoreCase("root")) {
                    if(true){
                        //System.out.println("Element:");
                        //System.out.print("path = ");
                        //System.out.println(paths);

                    //printPath();
                    if (children.size() == 0) {
                        if ((isInvalid && value == null) || value.equals("\"")) {
                            //System.out.println("value = \"\"");
                            curVal = "";
                        } else {
                            if (value.startsWith("\"") && !value.endsWith("\"")) {
                                value = value.substring(1);
                            }

                            if (value.endsWith("\",")) {
                                value = value.substring(0, value.length() - 2);
                            } else if (value.endsWith(",")) {
                                value = value.substring(0, value.length() - 1);
                            }

                            if (value.endsWith("\"") || value.equals("null")) {
                                //System.out.println("value = " + value);
                            } else {
                                //System.out.println("value = \"" + value + "\"");
                            }

                            if (value.endsWith("\"")) {
                                value = value.substring(1, value.length() - 1);
                            }

                            curVal = value;
                            // Logger.getLogger( JSON.class.getName()).info(value);
                        }
                    }
                    if (attributes.size() != 0) {
                        //System.out.println("attributes:");
                        attributes.forEach((key, value) -> {
                            if (key.startsWith("@")) {
                                //System.out.println(key.substring(1) + " = \"" + value + "\"");
                                curAttr.put(key.substring(1), value);
                            } else {
                                //System.out.println(key + " = \"" + value + "\"");
                                curAttr.put(key, value);
                            }
                        });
                    }
                    // System.out.println("invalid = " + isInvalid);
                    //System.out.println(" ");

                }

            }
                if (name.startsWith("@")) {
                    name = name.substring(1);
                }

                if (children.size() != 0) {
                    if (!name.startsWith("#") || isInvalid) {
                        requests.add(PseudoElement.container(name, curAttr, false));
                    }

                    children.forEach(JSON::print);
                    //  System.out.println("*******************************************");
                    //  System.out.println("End of container " + name);
                    if (!name.startsWith("#") || isInvalid) {
                        requests.add(PseudoElement.goUpRequest());
                    }
                    //   System.out.println("*******************************************");
                } else {
                    requests.add(PseudoElement.element(name, curVal, curAttr));
                }

            }
        }

        public List<JSON> getChildren() {
            return children;
        }

        public void goUp() {
            if (current.value == null && current.children.size() == 0) {
                current.isInvalid = true;
            }

            if (current.isInvalid) {
                stripAttributes();
                Iterator<JSON> iterator = current.children.iterator();
                while (iterator.hasNext())  {
                    JSON child = iterator.next();
                    if (child.name.startsWith("@")
                            || child.name.startsWith("#")) {
                        if (current.children.
                                stream()
                                .anyMatch(o -> o.name
                                        .equals(child.name
                                                .substring(1)))) {
                            iterator.remove();
                        }

                    }
                }

                if (current.stripped && current.children.size() > 1 && current.additionHistory.size() > 0) {
                    int currentIndex = 0;
                    for (String line : current.additionHistory) {
                        JSON json =  current.children.stream()
                                .filter(customer -> line.equals(customer.name))
                                .findAny()
                                .orElse(null);
                        if (json != null) {
                            current.children.remove(json);
                            current.children.add(currentIndex, json);
                            currentIndex++;
                        }
                    }
                }

            }

            if (current.parent != null) {
                current = current.parent;
            }
        }

        public static List<PseudoElement> getRequests() {
            return requests;
        }
    }
  learner_created: true
- name: src/converter/presentation/XML.java
  visible: true
  text: |
    package converter.presentation;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Map;

    public class XML {
        private Map<String, String> attributes;
        private String elementName;
        private String value;
        private XML parent;
        private List<XML> children = new ArrayList<>();
        private static XML current;
        private boolean containsContainer = false;
        private static List<PseudoElement> structure = new ArrayList<>();
        private boolean isArray = false;
        private boolean isArrayElement = false;
        private boolean isContainer = false;

        private XML(String elementName) {
            this.elementName = elementName;
        }

        public void addContainer(String name, Map<String, String> attributes) {
            current.containsContainer = true;
            current.children.add(new XML(name));
            current.children.get(current.children.size() - 1).parent = current;
            current = current.children.get(current.children.size() - 1);
            current.attributes = attributes;
        }

        public void addElement(String name, String value,
                               Map<String, String> attributes) {

            current.children.add(new XML(name));
            current.children.get(current.children.size() - 1).parent = current;
            current = current.children.get(current.children.size() - 1);
            current.attributes = attributes;
            current.value = value;
            if (current.parent != null) {
                current = current.parent;
            }
        }

        public List<XML> getChildren() {
            return children;
        }

        public void goUp() {
            current.isContainer = true;
            if (current.parent != null) {
                current = current.parent;
            }
        }

        public static XML root() {
            XML xml = new XML("XML_root");
            current = xml;
            return xml;
        }

        public void generate() {
            boolean isLast = false;

            if (parent != null) {
                if (elementName.equals(
                        parent.children.get(parent.children.size() - 1)
                                .elementName)) {
                    isLast = true;
                }
            }

            if (children.size() > 1) {
                String name = children.get(0).elementName;
                isArray = children.stream().allMatch(e -> e.elementName.equals(name));
                if (isArray) {
                    children.forEach(child -> child.isArrayElement = true);
                }
            }

            if (children.size() == 0 && value == null && isContainer
                    && attributes.size() == 0) {
                value = "";
            }


            if (children.size() > 0) {
                structure.add(PseudoElement.container(elementName, attributes, containsContainer)
                        .setChild(isLast).setArray(isArray).setArrayElement(isArrayElement));
                children.forEach(XML::generate);
                structure.add(PseudoElement.goUpRequest().setChild(isLast).setArray(isArray).setArrayElement(isArrayElement));
            } else {
                structure.add(PseudoElement.element(elementName, value, attributes)
                        .setChild(isLast).setArray(isArray).setArrayElement(parent.isArray));
            }
        }

        public static List<PseudoElement> getRequests() {
            return structure;
        }
    }
  learner_created: true
- name: src/converter/presentation/JSONDirector.java
  visible: true
  text: |-
    package converter.presentation;

    import java.util.*;

    public class JSONDirector {
        private XML xml;
        private List<String> content;
        private JSONBuilder builder = new JSONBuilder();
        private XMLParser parser = new XMLParser();
        private Stack<String> executionStack = new Stack<>();
        private List<PseudoElement> requests = new ArrayList<>();

        private void printContainer(String line, String process) {
            Map<String, String> attributes;

            executionStack.push(process);

            attributes = builder.listOfAttributes(parser.parseAttributes(line));

            xml.addContainer(executionStack.peek(), attributes);
        }

        private void printElement(String line, String process) {
            Map<String, String> attributes;

            executionStack.push(process);


            String content = parser.getContent(line,
                    process);

            attributes = builder.listOfAttributes(parser.parseAttributes(line));


            xml.addElement(executionStack.peek(), content, attributes);
            executionStack.pop();
        }

        private void parseElement(List<String> elements) {

            String process;
            xml = XML.root();
            for (int i = 0; i < elements.size(); i++) {
                process = parser.extractName(elements.get(i));

                if (parser.isParent(elements.get(i))) {
                    //System.out.println("PROCESS"+process);
                    if (process.startsWith("/")) {
                        xml.goUp();
                        executionStack.pop();
                        continue;
                    } else {
                        printContainer(elements.get(i), process);
                    }
                } else {//\"(?=})|(,|}(?!,))|{(?=\")

                    printElement(elements.get(i), process);
                }

            }

            //    System.out.println("yay");

            xml.getChildren().forEach(XML::generate);
            List<PseudoElement> requests = XML.getRequests();
            executionStack.clear();

            //requests.forEach(System.out::println);

            builder.start();
            for (PseudoElement request : requests) {
                if (request.isGoUp()) {
                    boolean hasAttributes;
                    if (request.getAttributes() != null) {
                        if (request.getAttributes().size() == 0) {
                            hasAttributes = false;
                        } else {
                            hasAttributes = true;
                        }
                    } else {
                        hasAttributes = false;
                    }


                    builder.createEnd(request.isArray(), executionStack.size(), request.isArray());
                    executionStack.pop();
                } else if (request.isParent()) {
                    builder.createContainer(request.getName(),
                            request.getAttributes().size() > 0,
                            request.getAttributes(),
                            executionStack.size(),
                            request.isArrayElement(),
                            request.isArray());
                    executionStack.push(request.getName());
                } else {
                    builder.createSingleElement(request.getName(),
                            request.getValue(),
                            request.getAttributes(),
                            request.isArrayElement(),
                            executionStack.size());
                }
            }

            builder.end();

            builder.printResults();
        }

        private List<String> beautifyContent(String content) {
            content = content.replaceFirst("<\\?.+?\\?>\\n?", "");
            content = content.replaceAll(">(?![@-~!-;=])", ">\n");
            String[] lines = content.split("\n");

            for (int i = 0; i < lines.length; i++) {
                lines[i] = lines[i].replaceFirst(" *(?=<)", "") + "\n";
            }

            for (int i = 0; i < lines.length - 1; i++) {


                if (parser.extractName(lines[i]).equals(
                        lines[i+1].trim().substring(2, lines[i+1].trim().length() - 1))) {
                    lines[i] = lines[i].substring(0, lines[i].length() - 1);
                }

                if (!lines[i].endsWith("\n")) {
                    lines[i] = lines[i].concat("\n");
                }
            }

            StringBuilder builder = new StringBuilder();

            for (String line : lines) {
                builder.append(line);
            }

            List<String> finalList = new ArrayList<>();
            Collections.addAll(finalList, builder.toString().split("\n"));


            return finalList;
        }

        public JSONDirector(String content) {
            content = content.replaceAll("\\r\\n|\\r|\\n|\\t", "");
            this.content = beautifyContent(content);
        }

        public void startConversion() {
            parseElement(content);
        }
    }
  learner_created: true
- name: src/converter/presentation/PseudoElement.java
  visible: true
  text: |
    package converter.presentation;

    import java.util.Map;

    public class PseudoElement {
        private boolean isParent;
        private Map<String, String> attributes;
        private String name;
        private String value;
        private boolean goUp = false;
        private boolean isLast = false;
        private boolean isArray = false;
        private boolean isArrayElement = false;

        public static PseudoElement goUpRequest() {
            PseudoElement element = new PseudoElement();
            element.goUp = true;
            return element;
        }

        public static PseudoElement container(String name,
                                              Map<String, String> attributes,
                                              boolean hasContainers) {
            PseudoElement element = new PseudoElement();
            element.name = name;
            element.attributes = attributes;
            element.isParent = true;
            return element;
        }

        public static PseudoElement element(String name, String value,
                                            Map<String, String> attributes) {
            PseudoElement element = new PseudoElement();
            if (value != null) {
                value = value.replaceAll(",", "");
            }
            element.name = name;
            element.value = value;
            element.attributes = attributes;
            element.isParent = false;

            return element;
        }

        public PseudoElement setChild(boolean isLast) {
            this.isLast = isLast;
            return this;
        }

        public boolean isLast() {
            return isLast;
        }

        public String getValue() {
            return value;
        }

        public String getName() {
            return name;
        }

        public Map<String, String> getAttributes() {
            return attributes;
        }


        public boolean isParent() {
            return isParent;
        }

        public boolean isGoUp() {
            return goUp;
        }

        public PseudoElement setArray(boolean isArray) {
            this.isArray = isArray;
            return this;
        }

        public PseudoElement setArrayElement(boolean isArrayElement) {
            this.isArrayElement = isArrayElement;
            return this;
        }

        public boolean isArray() {
            return isArray;
        }

        public boolean isArrayElement() {
            return isArrayElement;
        }

        @Override
        public String toString() {
            return "PseudoElement{" +
                    "isParent=" + isParent +
                    ", attributes=" + attributes +
                    ", name='" + name + '\'' +
                    ", value='" + value + '\'' +
                    ", goUp=" + goUp +
                    ", isLast=" + isLast +
                    ", isArray=" + isArray +
                    ", isArrayElement=" + isArrayElement +
                    '}';
        }
    }
  learner_created: true
- name: src/converter/presentation/Converter.java
  visible: true
  text: |
    package converter.presentation;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;

    public class Converter {
        private String content;

        private void parseXML() {
            JSONDirector director = new JSONDirector(content);
            director.startConversion();
        }

        private void parseJSON() {
            XMLDirector director = new XMLDirector(content);
            director.startConversion();
        }

        public void start() {
            try {
                //Path path = Paths.get("test.txt");
                Path path = Paths.get("C:\\Users\\eneye\\Documents\\Abdulmumin\\test.txt");
                content = Files
                        .readString(path, StandardCharsets.UTF_8)
                        .trim();
                //System.out.println(content);
                long c = System.currentTimeMillis();
                if (content.startsWith("<")) {
                    parseXML();
                } else {
                    parseJSON();
                }
                long d = System.currentTimeMillis() - c;
            } catch (IOException e) {
                System.out.println("Error while reading file occurred.");
                System.out.println(e.getMessage());
            }
        }
    }
  learner_created: true
- name: src/converter/presentation/XMLParser.java
  visible: true
  text: |
    package converter.presentation;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class XMLParser {
        private Pattern pattern;
        private Matcher matcher;
        private int i = 0;

        //Is safe to use on nested elements
        public String extractName(String element) {
            pattern = Pattern.compile("(?<=<).+?(?=\\s|/|>)");
            matcher = pattern.matcher(element);
            if (matcher.find()) {
                String content = matcher.group();

                if (content.endsWith("/")) {
                    //System.out.println(content);
                    return content.substring(0, content.length() - 1);
                } else {
                    //System.out.println(element);
                    return content;
                }
            }

            return "null";
        }

        public String parseAttributes(String element) {
            String content = element.replaceFirst("<.+?\\s", "");
            pattern = Pattern.compile(".+?(?=/>|>)");
            matcher = pattern.matcher(content);

            if (matcher.find()) {
                //System.out.println(s);
                String s = matcher.group().trim();

                return s;
            }

            return "null";//checked
        }

        public String getContent(String element, String name) {

            String originalPattern = String.format("(?<=>).*(?=</%s>)", name);
            pattern = Pattern.compile(originalPattern);
            matcher = pattern.matcher(element);


            if (matcher.find()) {
                String s = matcher.group().replaceAll("</.+?>", "");

                return s;//checked
            } else {
                return null;//checked
            }
        }

        public boolean isParent(String line) {
            if (line.contains("/>")) {
                return false;
            }

            long count = line.chars().filter(ch -> ch == '<').count();
            return count == 1;
        }
    }
  learner_created: true
- name: src/converter/presentation/JSONBuilder.java
  visible: true
  text: |-
    package converter.presentation;

    import java.util.ArrayList;
    import java.util.LinkedHashMap;
    import java.util.List;
    import java.util.Map;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JSONBuilder {
        private StringBuilder builder = new StringBuilder();
        private int numberOfBraces = 0;

        public Map<String, String> listOfAttributes(String attributes) {
            attributes = attributes.replaceAll("'", "\"");

            Pattern pattern = Pattern.compile(".+?\\s*=\\s*\".*?\"");
            Matcher matcher = pattern.matcher(attributes);

            List<String> attrList = new ArrayList<>();
            while (matcher.find()) {
                attrList.add(matcher.group().trim());
            }
            //System.out.println(attrList);
            Map<String, String> attrMap = new LinkedHashMap<>();
            String[] attr;

            for (String attribute : attrList) {
                attr = attribute.split("\\s*=\\s*");
                //System.out.println(attr[0]);
                attrMap.put(attr[0], attr[1]);
            }

            return attrMap;
        }

        public void start() {
            builder.append("{\n");
        }


        public void end() {
            if (builder.toString().endsWith(",\n")) {
                builder.setLength(builder.length() - 2);

                if (builder.toString().endsWith(",\n")) {
                    builder.setLength(builder.length() - 2);
                    builder.append("\n");
                }
            }

            builder.append("}");
        }

        public void createSingleElement(String name, String value,
                                        Map<String, String> attributes,
                                        boolean isParentArray, int depth) {

           /* if (builder.toString().endsWith(",\n")) {
                builder.setLength(builder.length() - 2);
                builder.append("\n");
            }*/
    //System.out.println(name);
            builder.append("    ".repeat(Math.max(0, depth + 1)));
            //  System.out.println(isParentArray);
            if (!isParentArray) {
                builder.append("\"");
                builder.append(name);
                builder.append("\": ");
            }

            if (attributes.size() > 0) {
                builder.append("{\n");
                attributes.forEach((key, val) -> {
                    builder.append("    ".repeat(Math.max(0, depth + 2)));
                    builder.append("\"@");
                    builder.append(key);
                    builder.append("\": \"");
                    if (val.startsWith("\"")) {
                        builder.append(val.substring(1));
                    } else {
                        builder.append(val);
                    }
                    builder.append(",");
                    builder.append("\n");
                });

                if(name.equalsIgnoreCase("attr2")){
                    //System.out.println(name);
                    //System.out.println(value);
                }
                builder.append("    ".repeat(Math.max(0, depth + 2)));
                builder.append("\"#");
                builder.append(name);
                builder.append("\": ");
                if (value != null) {
                    if (value.equals("null")) {
                        builder.append(value);
                        //builder.append("mike");
                    } else {
                        if (!value.startsWith("\"") && !value.startsWith("\"")) {
                            value = "\"" + value;
                        }
                        builder.append(value);
                        builder.append("\"");
                    }
                } else {

                    if(name.equalsIgnoreCase("attr2")){
                        builder.append("\"\"");
                    } else {
                        builder.append("null");
                    }

                }

                builder.append("\n");
                builder.append("    ".repeat(Math.max(0, depth + 1)));
                builder.append("}");
                //  if (!isLastChild) {
                //      builder.append(",");
                //  }

            } else {
                if (value != null) {
                    if (value.equals("null")) {
                        builder.append(value);
                    } else {
                        builder.append("\"");
                        builder.append(value);
                        builder.append("\"");
                    }
                } else {
                    builder.append("null");
                }

                //  if (!isLastChild) {
                builder.append("");
                //}
            }

            builder.append(",");
            builder.append("\n");
        }

        public void createContainer(String name, boolean valid,
                                    Map<String, String> attributes,
                                    int depth, boolean isParentArray,
                                    boolean isArray) {
            boolean hasAttributes = false;

            builder.append("    ".repeat(Math.max(0, depth + 1)));

            if (!isParentArray) {
                builder.append("\"");
                builder.append(name);
                builder.append("\": ");
            }

            if (isArray && attributes.size() == 0) {
                builder.append("[\n");
            } else {
                builder.append("{\n");
            }


            if (attributes.size() > 0) {
                hasAttributes = true;
                attributes.forEach((key, val) -> {
                    builder.append("    ".repeat(Math.max(0, depth + 1)));
                    builder.append("\"@");
                    builder.append(key);
                    builder.append("\": \"");
                    if (val.startsWith("\"")) {
                        builder.append(val.substring(1));
                    } else {
                        builder.append(val);
                    }
                    builder.append(",\n");
                });

                builder.setLength(builder.length() - 1);
                builder.append("\n");
            }

            if (valid) {
                if (hasAttributes) {
                    numberOfBraces++;
                }

                builder.append("    ".repeat(Math.max(0, depth + 1)));
                builder.append("\"#");
                builder.append(name);
                if (isArray) {
                    builder.append("\": [\n");
                } else {
                    builder.append("\": {\n");
                }
            } else if (!hasAttributes) {
                //System.out.println(name);
            }
        }

        public void createEnd(boolean isArray, int depth, boolean isArrayElement) {
            if (builder.toString().endsWith(",\n")) {
                builder.setLength(builder.length() - 2);
                builder.append("\n");
            }
            // builder.setLength(builder.length() - 2);
            //builder.append("\n");
            builder.append("    ".repeat(Math.max(0, depth)));


            builder.append("    ".repeat(Math.max(0, depth)));
            if (isArray) {
                builder.append("]");
            } else {
                builder.append("}");
            }

            if (numberOfBraces > 0) {
                while (numberOfBraces != 0) {
                    builder.append("}\n");
                    numberOfBraces--;
                }
            }
            //System.out.println(isLastChild);
            //if (!isLastChild) {
            //   builder.append(",");
            //}
            builder.append(",");
            builder.append("\n");
        }

        public void printResults() {
            System.out.println(builder.toString().trim());
        }
    }
  learner_created: true
- name: src/converter/presentation/UserInput.java
  visible: true
  text: |
    package converter.presentation;

    import java.util.*;

    public class UserInput {
        private final Scanner scanner;

        public UserInput() {
            this.scanner = new Scanner(System.in);
        }

        public void run(String input) {
            //String input = scanner.nextLine();
            char c = input.charAt(0);
            switch (c) {
                case '<':

                    if(input.contains("=")){
                        //convertToJSON2(input);
                    } else {
                        //convertToJSON(input);
                    }

                    nestingConverter(input);

                    break;
                case '{':
                    if (input.contains("#")) {
                        //convertToXML2(input);
                    } else {
                        //convertToXML(input);
                    }

                    nestingConverterXML(input);
                    break;
                default:
            }
        }

        public void nestingConverterXML(String json){
            //System.out.println(json);
            Deque<String> t = addToStack(json);
            processJSON(t);
        }

        public void processJSON(Deque<String> tokens) {
            List<String> paths = new ArrayList<>();
            int i = 0;
            while(true) {
                String firstString = tokens.peekFirst();
                String lastString = tokens.peekLast();
                String path = "", value = "";
                if (firstString.equalsIgnoreCase("{") && lastString.equalsIgnoreCase("}")) {
                    tokens.removeLast();
                    tokens.removeFirst();
                } else {
                    String currentString = tokens.poll().replace("\\+", "");
                    String[] line = currentString.split(":");

                    if (line.length == 2) {
                        String line1 = line[0].strip().replace("\"", "");
                        String line2 = line[1].strip().replace("\\+", "");
                        //System.out.printf("%s, %s", line1, line2);
                        if(line2.equals("{")){
                            System.out.println("Element:");
                            if(!paths.contains(line1)){
                                paths.add(line1);
                                path = line1;
                            }
                            printPaths(paths, "");
                            boolean status = false;
                            String nextString = tokens.peek().replace("\\+", "");

                            Map<String, String> attr = new HashMap<>();
                            boolean same = false;
                            boolean dontPrint = false;

                            while(nextString.contains("@") || nextString.contains("#")) {
                                currentString = tokens.poll().replace("\\+", "");
                                line = currentString.split(":");
                                line1 = line[0].strip().replace("\"", "");
                                line2 = line[1].strip().replace("\\+", "").replace("\"", "");
                                if (line1.contains("@")) {
                                    String key = line1.replace("@","").replace("\"","");
                                    value = line2.replace("\"","").replace(",","");
                                    if(key.length()>1 && !value.equalsIgnoreCase("{")){
                                        //printAttributesJSON(key, value);
                                        attr.put(key, value);
                                    } else {
                                        dontPrint = true;
                                    }

                                } else {
                                    String key = line1.replace("#","").replace("\"","");
                                    value = line2.replace("\"","").replace(",","");
                                    //printValue(value);
                                    if(path.equalsIgnoreCase(key)){
                                        same=true;
                                    }
                                }
                                nextString = tokens.peek().replace("\\+", "");
                                status = true;
                            }
                            if(same){
                                if(!dontPrint){
                                    if ("null".equalsIgnoreCase(value)) {
                                        printValue(null);
                                    } else if (value.contains("{") && value.contains("}")){
                                        printValue("");
                                    } else {
                                        printValue(value);
                                    }
                                }

                                for (Map.Entry<String, String> it: attr.entrySet()) {
                                    printAttributesJSON(it.getKey(),it.getValue());
                                }
                            }
                            System.out.println();
                            if(status){
                                paths.remove(path);
                            }

                        } else {
                            path = line1.replace("\"", "");
                            value = line2.replace("\"", "").replace(",", "");
                            System.out.println("Element:");
                            printPaths(paths, path);
                            if ("null".equalsIgnoreCase(value)) {
                                printValue(null);
                            } else if (value.contains("{") && value.contains("}")){
                                printValue("");
                            } else {
                                printValue(value);
                            }



                            System.out.println();
                        }
                    } else {

                    }

                }

                if (i++ == 53){
                    break;
                }

            }
            //tokens.stream().forEach(System.out::println);
        }

        public void processJSON11(Deque<String> tokens) {

            //tokens.stream().forEach(System.out::println);
            List<String> paths = new ArrayList<>();
            int i = 0;
            while(true) {
                //if (!tokens.isEmpty()) {
                //System.out.println("working");
                String firstString = tokens.peekFirst();
                String lastString = tokens.peekLast();
                String path = "", value = "";
                if (firstString.equalsIgnoreCase("{") && lastString.equalsIgnoreCase("}")) {
                    tokens.removeLast();
                    tokens.removeFirst();
                    //processJSON(tokens);
                } else {
                    String currentString = tokens.poll().replace("\\+", "");
                    String[] line = currentString.split(":");

                    if (line.length == 2) {
                        String line1 = line[0].strip();
                        String line2 = line[1].strip().replace("\\+", "");
                        if (!line1.contains("#") && !line1.contains("@") && line2.equalsIgnoreCase("{")) {
                            path = line1.replace("\"", "");
                            if(!paths.contains(path)){
                                paths.add(path);
                            }
                            String nextString = tokens.peek().replace("\\+", "");
                            if(nextString.contains("@")){
                                processJSON(tokens);
                            } else {

                            }
                            System.out.println("Element:");
                            printPaths(paths, "");

                            System.out.println();
                        } else if (line1.contains("#") || line1.contains("@")){
                            if (line1.contains("@")) {
                                String key = line1.replace("@","").replace("\"","");
                                value = line2.replace("\"","").replace(",","");
                                printAttributesJSON(key, value);
                            } else {
                                value = line2.replace("\"","").replace(",","");
                                printValue(value);
                            }
                        } else {
                            path = line1.replace("\"","");
                            value = line2.replace("\"","").replace(",","");
                            if(!paths.contains(path)){
                                paths.add(path);
                            }
                            System.out.println("Element:");
                            printPaths(paths, "");
                            printValue(value);
                            System.out.println();


                        }

                    } else {
                        if(currentString.equalsIgnoreCase("},")){
                            //System.out.println(currentString);
                        }

                    }
                    //processJSON(tokens);
                }

                if (i++ == 5){
                    break;
                }

            }
            //tokens.stream().forEach(System.out::println);
        }

        public void nestingConverter(String xml){
            //System.out.println(xml);
            Deque<String> t = addToStack(xml);
            processXML(t);
        }

        public void processXML(Deque<String> tokens) {
            //System.out.println("#*#*#*#*#*#*#*####*#*#*#*#*#");
            //tokens.stream().forEach(System.out::println);
            List<String> paths = new ArrayList<>();
            int i = 0;
            while(true) {

                String firstString = tokens.peekFirst().replace("<","").replace(">","");
                String lastString = tokens.peekLast().replace("</","").replace(">","");
                String path = "", value = "";
                if (firstString.equalsIgnoreCase(lastString)) {
                    tokens.removeLast();
                    tokens.removeFirst();
                    System.out.println("Element:");
                    path = firstString;

                    if(!paths.contains(path)){
                        paths.add(path);
                    }

                    printPaths(paths, "");
                    System.out.println();
                } else {
                    String currentString = tokens.poll();

                    if (currentString.contains("</")) {
                        System.out.println("Element:");
                        String[] s = currentString.split(">");
                        String[] s2 = s[1].split("</");

                        if (s2.length == 2) {
                            value = s2[0];
                            path = s2[1];
                        }
                        if (value.isEmpty()){
                            //value = "\"\"";
                        }

                        //System.out.println(currentString);
                        /*if (s[0].contains("=")){
                            String[] s3 = s[0].split(" ");
                            for(int j = 1; j < s3.length; j++){
                                System.out.println(s3[j]);
                            }
                        }*/

                        printPaths(paths, path);
                        //System.out.println(path);
                        printValue(value);
                        if (s[0].contains("=")){
                            printAttributes(s[0]);
                        }
                        System.out.println();
                    } else if (currentString.contains("/>")){
                        System.out.println("Element:");
                        String s = currentString.replace("/>", "").replace("<","").strip();

                        //value = null;
                        if (s.contains("=")){
                            String[] s2 = s.split(" ");
                            path = s2[0].strip();
                        }else{
                            path = s;
                        }
                        //System.out.println(currentString);
                        //System.out.println(path);
                        printPaths(paths, path);
                        printValue(null);
                        if (s.contains("=")){
                            printAttributes(s);
                        }
                        System.out.println();
                    }
                }

                if (i++ == 14){
                    break;
                }

            }
            //tokens.stream().forEach(System.out::println);
        }

        public void printValue(String v){
            System.out.print("value = ");
            if(v == null){
                System.out.println(v);
            }else{
                System.out.println("\""+v+"\"");
            }
        }

        public void printAttributes(String s){
            String[] s3 = s.split(" ");

            if(s3.length>0){
                System.out.println("attributes:");
                for(int j = 1; j < s3.length; j++){
                    System.out.println(s3[j]);
                }
            }
        }

        public void printAttributesJSON(String k, String v){
            System.out.println("attributes:");
            System.out.println(k+"=\""+v+"\"");

        }

        public void printPaths(List<String> list, String p){
            System.out.print("path = ");
            String s = "";
            Set<String> l = Set.of();
            //ArrayList<String> list = new ArrayList<>(l);
            for(int i = 0; i < list.size(); i++) {
                if (i == list.size()-1){
                    s += list.get(i);
                }else{
                    s += list.get(i) + ", ";
                }
            }
            if(p.isEmpty()){
                System.out.println(s);
            }else{
                System.out.println(s+", "+p);
            }

        }

        public Deque<String> addToStack(String xml){
            Deque<String> tokens = new LinkedList<>();
            String ls = System.getProperty("line.separator");
            String[] lines = xml.split("\n");
            for (int i = 0; i < lines.length; i++) {
                tokens.add(lines[i].strip());
            }
            return tokens;
        }

        public void convertToXML(String json) {
            String openingTag = "<";
            String openingClosingTag = "</";
            String selfClosingTag = "/>";
            String closingTag = ">";
            String[] a = json.split(":");
            if (a.length == 2) {
                String b = a[0].replace('{', ' ');
                b = b.replace('"', ' ');
                b = b.strip();


                String c = a[1].replace('}', ' ');
                c = c.replace('"', ' ');
                c = c.strip();


                if (c.equalsIgnoreCase("null")) {
                    openingTag += b;
                    openingTag += selfClosingTag;
                    System.out.println(openingTag);
                } else {
                    openingTag += b;
                    openingTag += closingTag;
                    openingClosingTag += b;
                    openingClosingTag += closingTag;
                    openingTag += c + openingClosingTag;
                    System.out.println(openingTag);
                }




            }

        }

        public void convertToXML2(String json) {
            if(json.contains("null")) {
                xml1(json);
            } else {
                xml2(json);
            }
        }

        public void xml1(String json) {
            String openingTag = "<";
            String openingClosingTag = "</";
            String selfClosingTag = "/>";
            String closingTag = ">";
            String[] a = json.split(":");
            String xml = "<";

            Queue<String> tokens = new LinkedList<>();

            //Arrays.stream(a).forEach(System.out::println);
            //Arrays.stream(d).forEachOrdered(t -> tokens.add(t));
            for (int i = 0; i< a.length; i++) {
                if(a[i].contains(",")){
                    String[] s = a[i].split(",");
                    for (int j = 0; j< s.length; j++) {
                        tokens.add(s[j]);
                    }
                } else {
                    tokens.add(a[i]);
                }
            }
            //tokens.stream().forEach(System.out::println);

            String key = null;
            String value = null;
            String obj = null;
            boolean exit = false;
            while(true){

                String s = tokens.poll();

                if (s == null) {
                    break;
                }
                if (s.contains("{") && !s.contains("@")){
                    s = s.replace('{', ' ');
                    s = s.strip();
                    s = s.replace('"', ' ');
                    s = s.strip();
                    obj = s;
                    xml +=  s + " ";
                } else if(s.contains("\"@")) {
                    s = s.replace('{', ' ');
                    s = s.strip();
                    s = s.replace('"', ' ');
                    s = s.strip();
                    s = s.replace('@', ' ');
                    s = s.strip();
                    key = s;
                    value = tokens.poll();
                    value = value.replace('"', ' ');
                    value = value.strip();
                    xml += key + " = \"" + value + "\" ";
                } else if (s.contains("\"#")){
                    s = s.replace('{', ' ');
                    s = s.strip();
                    s = s.replace('"', ' ');
                    s = s.strip();
                    s = s.replace('#', ' ');
                    s = s.strip();

                    value = tokens.poll();
                    value = value.replace('"', ' ');
                    value = value.strip();
                    value = value.replace('}', ' ');
                    value = value.strip();
                    //xml += ">"+value+"</"+obj+">";
                    xml += "/>";
                    exit = true;
                } else {
                    key = s;
                }

                if(exit){
                    break;
                }

            }
            System.out.println(xml);
        }

        public void xml2(String json) {
            String openingTag = "<";
            String openingClosingTag = "</";
            String selfClosingTag = "/>";
            String closingTag = ">";
            String[] a = json.split(":");
            String xml = "<";

            Queue<String> tokens = new LinkedList<>();

            //Arrays.stream(a).forEach(System.out::println);
            //Arrays.stream(d).forEachOrdered(t -> tokens.add(t));
            for (int i = 0; i< a.length; i++) {
                if(a[i].contains(",")){
                    String[] s = a[i].split(",");
                    for (int j = 0; j< s.length; j++) {
                        tokens.add(s[j]);
                    }
                } else {
                    tokens.add(a[i]);
                }
            }
            //tokens.stream().forEach(System.out::println);

            String key = null;
            String value = null;
            String obj = null;
            boolean exit = false;
            while(true){

                String s = tokens.poll();

                if (s == null) {
                    break;
                }
                if (s.contains("{") && !s.contains("@")){
                    s = s.replace('{', ' ');
                    s = s.strip();
                    s = s.replace('"', ' ');
                    s = s.strip();
                    obj = s;
                    xml +=  s + " ";
                } else if(s.contains("\"@")) {
                    s = s.replace('{', ' ');
                    s = s.strip();
                    s = s.replace('"', ' ');
                    s = s.strip();
                    s = s.replace('@', ' ');
                    s = s.strip();
                    key = s;
                    value = tokens.poll();
                    value = value.replace('"', ' ');
                    value = value.strip();
                    xml += key + " = \"" + value + "\" ";
                } else if (s.contains("\"#")){
                    s = s.replace('{', ' ');
                    s = s.strip();
                    s = s.replace('"', ' ');
                    s = s.strip();
                    s = s.replace('#', ' ');
                    s = s.strip();

                    value = tokens.poll();
                    value = value.replace('"', ' ');
                    value = value.strip();
                    value = value.replace('}', ' ');
                    value = value.strip();
                    xml += ">"+value+"</"+obj+">";
                    exit = true;
                } else {
                    key = s;
                }

                if(exit){
                    break;
                }

            }
            System.out.println(xml);
        }

        public void convertToJSON(String xml) {
            String openingBraces = "{";
            String semiColon = ":";
            String nullValue = " null";
            String closingBraces = "}";
            String quotes = "\"";
            String[] a = xml.split(">");
            String key = null;
            String value = null;
            if(a.length == 2) {

                String[] a2 = a[1].split("</");
                if (a2.length == 2) {
                    value = a2[0];
                    key = a2[1];
                }

                openingBraces += quotes + key + quotes + semiColon;
                openingBraces += quotes + value + quotes + closingBraces;
                System.out.println(openingBraces);
            } else if (a.length == 1) {

                String s = a[0].replace('<', ' ');
                s = s.replace('/', ' ');
                s = s.strip();
                openingBraces += quotes + s + quotes + semiColon;
                openingBraces += nullValue + closingBraces;
                System.out.println(openingBraces);
            }
        }

        public void convertToJSON2(String xml) {
           if(xml.contains("</")) {
                json2(xml);
           } else {
               json1(xml);
           }
        }
        public void json2(String xml) {
            String[] a = xml.split(">");
            String[] d = a[0].split(" ");

            String json = "{";

            Queue<String> tokens = new LinkedList<>();

            //Arrays.stream(d).forEach(System.out::println);
            //Arrays.stream(d).forEachOrdered(t -> tokens.add(t));
            for (int i = 0; i< d.length; i++) {
                tokens.add(d[i]);
            }
            tokens.add(a[1]);
            //tokens.stream().forEach(System.out::println);
            String key = null;
            String value = null;
            String obj = null;
            boolean exit = false;
            while(true){

                String s = tokens.poll();

                if (s == null) {
                    break;
                }
                if (s.contains("<") && !s.contains("</")){
                    s = s.replace('<', ' ');
                    s = s.strip();
                    obj = s;
                    json += "\"" + s + "\":{";
                } else if(s.equals("=")) {
                    value = tokens.poll();
                    json += "\"@" + key + "\":" + value + ",";
                } else if (s.contains("\">")){

                }else if (s.contains("\"")){

                }else if (s.contains("</")){
                    exit = true;
                    String[] c = s.split("</");
                    json += "\"#" + obj + "\":\"" + c[0]+"\"}}";
                }else if (s.contains("/>")) {
                    exit = true;
                    json += "\"#" + obj + "\":" + "null}}";
                } else {
                    key = s;
                }

                if(exit){
                    break;
                }

            }
            System.out.println(json);
        }

        public void json1(String xml) {
            String[] a = xml.split("<");
            String[] b = xml.split("/>");
            String[] c = xml.split("=");
            String[] d = xml.split(" ");

            String openingBraces = "{";
            String semiColon = ":";
            String nullValue = " null";
            String closingBraces = "}";
            String quotes = "\"";
            String json = "{";

            Queue<String> tokens = new LinkedList<>();

            //Arrays.stream(d).forEach(System.out::println);
            //Arrays.stream(d).forEachOrdered(t -> tokens.add(t));
            for (int i = 0; i< d.length; i++) {
                tokens.add(d[i]);
            }
            String key = null;
            String value = null;
            String obj = null;
            boolean exit = false;
            while(true){

                String s = tokens.poll();

                if (s == null) {
                    break;
                }
                if (s.contains("<")){
                    s = s.replace('<', ' ');
                    s = s.strip();
                    obj = s;
                    json += "\"" + s + "\":{";
                } else if(s.equals("=")) {
                    value = tokens.poll();
                    json += "\"@" + key + "\":" + value + ",";
                } else if (s.contains("\">")){

                }else if (s.contains("\"")){

                }else if (s.contains("</")){
                    exit = true;
                }else if (s.contains("/>")) {
                    exit = true;
                    json += "\"#" + obj + "\":" + "null}}";
                } else {
                    key = s;
                }

                if(exit){
                    break;
                }

            }
            System.out.println(json);
        }
    }
  learner_created: true
- name: src/converter/presentation/Pair.java
  visible: true
  text: |
    package converter.presentation;

    public class Pair<F, S> {
        private F first;
        private S second;

        public Pair(F first, S second) {
            this.first = first;
            this.second = second;
        }

        public Pair() {}

        public F getFirst() {
            return first;
        }

        public S getSecond() {
            return second;
        }

        public void setFirst(F first) {
            this.first = first;
        }

        public void setSecond(S second) {
            this.second = second;
        }

        @Override  //TESTING ONLY
        public String toString() {
            return "Pair + < " + first + ", " + second + " >";
        }
    }
  learner_created: true
- name: src/converter/presentation/JSONParser.java
  visible: true
  text: |
    package converter.presentation;

    import java.util.logging.Logger;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JSONParser {
        private Pattern pattern;
        private Matcher matcher;
        private final static Logger LOGGER = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);

        public Pair<String, String> extractObject(String element) {
            Pair<String, String> pair = new Pair<>();
            pattern = Pattern.compile("(?<=\\{).+(?=})");
            matcher = pattern.matcher(element);

            if (matcher.find()) {
                pair.setSecond(matcher.group());
            } else {
                pair.setSecond("null");
            }

            pattern = Pattern.compile("\".+?\"");
            matcher = pattern.matcher(element);

            if (matcher.find()) {
                pair.setFirst(matcher.group()
                        .substring(1, matcher.group().length() - 1));
            }
            return pair;
        }

        public String extractName(String element) {
            pattern = Pattern.compile("(?<=\").+?(?=\")");
            matcher = pattern.matcher(element);

            if (matcher.find()) {
                return matcher.group();
            }
            return "";
        }

        public Pair<String, String> extractAttribute(String element) {
            String[] attrArray = element.split("\"\\s*:\\s*\"?");
            Pair<String, String> attr = new Pair<>();
            attr.setFirst(attrArray[0].substring(1));


            String value = attrArray[1];
            if (value.endsWith("\",")) {
                value = value.substring(0, value.length() - 2);

            } else if (value.endsWith("\"")) {
                value = value.substring(0, value.length() - 1);

            } else if (value.endsWith(",")) {
                value = value.substring(0, value.length() - 1);

            }

            attr.setSecond(value);

            return attr;
        }

        public String getValue(String element) {
            String[] values = element.split("\"\\s*:\\s*");
            return values[1];
        }

        public String[] getElement(String element) {
            String[] elem =  element.split("(?<=\")\\s*:\\s*");

            if (elem[1].matches("\\s*?\\{\\s*?}\\s*,?")) {
                elem[1] = "\"\"";
            }

            if (elem[0].startsWith("\"")) {
                elem[0] = elem[0].substring(1, elem[0].length() - 1);
            }

            if (!elem[1].startsWith("\"")) {
                elem[1] = "\"" + elem[1] + "\"";
            }

            if (elem[1].startsWith("\"")) {
                elem[1] = elem[1].substring(1);
            }

            if (elem[1].endsWith(",\"")) {
                elem[1] = elem[1].substring(0, elem[1].length() - 1);
            }

            if (elem[1].endsWith("\"")) {
                elem[1] = elem[1].substring(0, elem[1].length() - 1);
            }


            return elem;
        }
    }
  learner_created: true
- name: src/converter/presentation/XMLBuilder.java
  visible: true
  text: |
    package converter.presentation;

    import java.util.List;
    import java.util.Map;
    import java.util.Stack;

    public class XMLBuilder {
        private StringBuilder xmlBuilder = new StringBuilder();

        private JSON json;
        public void createContainer(Stack<String> path, String name) {
            json.addChild(name, true);
        }
        public void goUp() {
            json.goUp();
        }

        public void print() {
            if (json.getChildren().size() > 1) {
                json.print();
            } else {
                json.getChildren().forEach(JSON::print);
            }
        }

        public void addAttribute(String key, String value) {
            if (value.equals("null")) {
                value = "";
            }

            if (key.length() == 0 || key.equals("@")) {
                json.stripAttributes();
            } else {
                json.addAttribute(key, value);
            }
        }

        public XMLBuilder(boolean create) {
            if (create) {
                json = JSON.root();
            }
        }

        public List<PseudoElement> result() {
            return JSON.getRequests();
        }

        public void setValue(String value) {
            json.setValue(value, true);
        }

        public void createSingleElement(String name, String value, Stack<String> path) {
            if (name.length() == 0 || name.equals("#"))  {
                json.stripAttributes();
            } else {
                json.addChild(name, true);
                json.setValue(value, true);
                json.goUp();
            }
        }

        public void stripAttributes() {
            json.stripAttributes();
        }


        public void addContainer(String name, Map<String, String> attributes,
                                 int depth) {
            xmlBuilder.append("    ".repeat(Math.max(0, depth)));
            xmlBuilder.append("<");
            xmlBuilder.append(name);
            attributes.forEach((key, value) -> {
                xmlBuilder.append(" ");
                xmlBuilder.append(key);
                xmlBuilder.append("=\"");
                xmlBuilder.append(value);
                xmlBuilder.append("\"");
            });
            xmlBuilder.append(">\n");
        }

        public void createSingleElement(String name, String value,
                                        Map<String, String> attributes,
                                        int depth) {
            xmlBuilder.append("    ".repeat(Math.max(0, depth)));
            xmlBuilder.append("<");
            xmlBuilder.append(name);
            attributes.forEach((key, val) -> {
                xmlBuilder.append(" ");
                xmlBuilder.append(key);
                xmlBuilder.append("=\"");
                xmlBuilder.append(val);
                xmlBuilder.append("\"");
            });
            if (value == null) {
                xmlBuilder.append(" />\n");
            } else if (value.equals("null")) {
                xmlBuilder.append(" />\n");
            } else {
                xmlBuilder.append(">");
                xmlBuilder.append(value);
                xmlBuilder.append("</");
                xmlBuilder.append(name);
                xmlBuilder.append(">\n");
            }

        }

        public void createEnd(String name, int depth) {
            xmlBuilder.append("    ".repeat(Math.max(0, depth - 1)));
            xmlBuilder.append("</");
            xmlBuilder.append(name);
            xmlBuilder.append(">\n");
        }

        public void getResult() {
            System.out.println(xmlBuilder.toString());
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5476#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 15 Mar 2022 15:23:42 UTC
record: -1
